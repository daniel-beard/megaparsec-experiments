
==================== FINAL INTERFACE ====================
2017-05-25 23:20:15.110655 UTC

interface main@main:Main 8002
  interface hash: b1e883d5f0813bfecdec7243204206db
  ABI hash: 4079ba9197c9086707aef3b939ad54e7
  export-list hash: 730aa6932c56ced6e5b32a51859dba7a
  orphan hash: 24533bd4c2f452084e8d73881d0539ec
  flag hash: a082d5a62f5379646209be97451d66ef
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.equation
  Main.expr
  Main.lexeme
  Main.lineComment
  Main.main
  Main.name
  Main.number
  Main.parens
  Main.prog
  Main.rawData
  Main.sc
  Main.scn
  Main.symbol
  Main.table
  Main.term
  Main.Equation{Main.Equation}
  Main.Expr{Main.Division Main.Multiplication Main.Negation Main.Reference Main.Subtraction Main.Sum Main.Value}
  Main.Program
  Main.RawData
module dependencies:
package dependencies: QuickCheck-2.9.2@QuickCheck-2.9.2-Jyj4gc4JxkEIgGFLAsGhs9
                      array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      exceptions-0.8.3@exceptions-0.8.3-ADEDRATtUrMK1JW4zMQ9U
                      ghc-boot-th-8.0.2@ghc-boot-th-8.0.2 ghc-prim-0.5.0.0
                      hashable-1.2.6.0@hashable-1.2.6.0-3EXxoqeEgbfAKr6aGkye6x
                      integer-gmp-1.0.0.1
                      integer-logarithms-1.0.1@integer-logarithms-1.0.1-IEHCuEd5sG4JjSjlx7m5JF
                      megaparsec-5.2.0@megaparsec-5.2.0-20VD1iYD3ayJUmkRrEccYt
                      megaparsec-recovery-0.1.0.0@megaparsec-recovery-0.1.0.0-BOAQogFlhCzFOlVcmCNBBx
                      mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.1.0@primitive-0.6.1.0-6AbSTw9JXz141LE5p6LGH
                      random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog
                      scientific-0.3.4.12@scientific-0.3.4.12-J9HRl69dpDBBzAMKxlfkoh
                      stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve
                      template-haskell-2.11.1.0
                      text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR
                      tf-random-0.5@tf-random-0.5-BGjMgO8m67W8CHiEl15kZ7
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
                      vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         hashable-1.2.6.0@hashable-1.2.6.0-3EXxoqeEgbfAKr6aGkye6x:Data.Hashable.Generic
         stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve:Control.Monad.STM
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Lazy
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Show
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Fusion.Bundle
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Compose base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         megaparsec-5.2.0@megaparsec-5.2.0-20VD1iYD3ayJUmkRrEccYt:Text.Megaparsec.Error
                         megaparsec-5.2.0@megaparsec-5.2.0-20VD1iYD3ayJUmkRrEccYt:Text.Megaparsec.Pos
                         megaparsec-5.2.0@megaparsec-5.2.0-20VD1iYD3ayJUmkRrEccYt:Text.Megaparsec.Prim
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primitive-0.6.1.0-6AbSTw9JXz141LE5p6LGH:Control.Monad.Primitive
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
                         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Lazy
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector
import  -/  base-4.9.1.0:Control.Applicative 32430a90492e727f4bd80db71c28600c
import  -/  base-4.9.1.0:Control.Monad a6784c5dab0d75c63dabec5a37843f98
import  -/  base-4.9.1.0:Data.Either 20b09ef8d0a5b74fdec011c40c1587f5
import  -/  base-4.9.1.0:Data.Functor 5ab1dc703df5b482e77efb697833ca3c
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  megaparsec-5.2.0@megaparsec-5.2.0-20VD1iYD3ayJUmkRrEccYt:Text.Megaparsec 9905e224ce45145021570092843caed3
import  -/  megaparsec-5.2.0@megaparsec-5.2.0-20VD1iYD3ayJUmkRrEccYt:Text.Megaparsec.Char a294e400c90b92cea836b2bbe9f89c5d
import  -/  megaparsec-5.2.0@megaparsec-5.2.0-20VD1iYD3ayJUmkRrEccYt:Text.Megaparsec.Combinator c20cacc3907a4d1cbed905fa2052286e
import  -/  megaparsec-5.2.0@megaparsec-5.2.0-20VD1iYD3ayJUmkRrEccYt:Text.Megaparsec.Error b82f3cd94bff63e2abf351e3bc2a9f8c
import  -/  megaparsec-5.2.0@megaparsec-5.2.0-20VD1iYD3ayJUmkRrEccYt:Text.Megaparsec.Expr 5436f58785d3a95e789a545618fd0383
import  -/  megaparsec-5.2.0@megaparsec-5.2.0-20VD1iYD3ayJUmkRrEccYt:Text.Megaparsec.Lexer b89725053d2449a1b07d35d21eeebe95
import  -/  megaparsec-5.2.0@megaparsec-5.2.0-20VD1iYD3ayJUmkRrEccYt:Text.Megaparsec.Prim 3d33f94ab3f5a7260a0a8baadd0b6de6
import  -/  megaparsec-5.2.0@megaparsec-5.2.0-20VD1iYD3ayJUmkRrEccYt:Text.Megaparsec.String 9555829c6b6fdaa40dac2d26f2e3277e
import  -/  megaparsec-recovery-0.1.0.0@megaparsec-recovery-0.1.0.0-BOAQogFlhCzFOlVcmCNBBx:Lib 009ac328895bcfe382506343b2927580
import  -/  scientific-0.3.4.12@scientific-0.3.4.12-J9HRl69dpDBBzAMKxlfkoh:Data.Scientific ddcbad6d103aad4be64c18ac206418ac
0cb0d26ebd0885555f92a427e34ad875
  $fEqEquation :: GHC.Classes.Eq Main.Equation
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Equation Main.$fEqEquation_$c==1 Main.$fEqEquation_$c/= -}
0cb0d26ebd0885555f92a427e34ad875
  $fEqEquation_$c/= ::
    Main.Equation -> Main.Equation -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Main.Equation) (w1 :: Main.Equation) ->
                 case w of ww { Main.Equation ww1 ww2 ->
                 case w1 of ww3 { Main.Equation ww4 ww5 ->
                 Main.$w$c/= ww1 ww2 ww4 ww5 } }) -}
52d72555d0d42e9fc2c31eef4c8a667a
  $fEqEquation_$c== :: Main.Expr -> Main.Expr -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
0cb0d26ebd0885555f92a427e34ad875
  $fEqEquation_$c==1 ::
    Main.Equation -> Main.Equation -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Main.Equation) (w1 :: Main.Equation) ->
                 case w of ww { Main.Equation ww1 ww2 ->
                 case w1 of ww3 { Main.Equation ww4 ww5 ->
                 Main.$w$c== ww1 ww2 ww4 ww5 } }) -}
52d72555d0d42e9fc2c31eef4c8a667a
  $fEqExpr :: GHC.Classes.Eq Main.Expr
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Expr Main.$fEqEquation_$c== Main.$fEqExpr_$c/= -}
52d72555d0d42e9fc2c31eef4c8a667a
  $fEqExpr_$c/= :: Main.Expr -> Main.Expr -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Main.Expr) (b :: Main.Expr) ->
                 case Main.$fEqEquation_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
0cb0d26ebd0885555f92a427e34ad875
  $fShowEquation :: GHC.Show.Show Main.Equation
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Equation
                  Main.$fShowEquation_$cshowsPrec
                  Main.$fShowEquation_$cshow
                  Main.$fShowEquation_$cshowList -}
0cb0d26ebd0885555f92a427e34ad875
  $fShowEquation1 :: Main.Equation -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: Main.Equation) ->
                 case w of ww { Main.Equation ww1 ww2 ->
                 Main.$w$cshowsPrec 0# ww1 ww2 }) -}
f6076129f31f6ba1d15ab47b38c49b72
  $fShowEquation2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Equation "#) -}
0cb0d26ebd0885555f92a427e34ad875
  $fShowEquation_$cshow :: Main.Equation -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Main.Equation) ->
                 case w of ww { Main.Equation ww1 ww2 -> Main.$w$cshow ww1 ww2 }) -}
0cb0d26ebd0885555f92a427e34ad875
  $fShowEquation_$cshowList :: [Main.Equation] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Main.Equation
                   Main.$fShowEquation1) -}
0cb0d26ebd0885555f92a427e34ad875
  $fShowEquation_$cshowsPrec ::
    GHC.Types.Int -> Main.Equation -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Main.Equation) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Main.Equation ww3 ww4 ->
                 Main.$w$cshowsPrec ww1 ww3 ww4 } }) -}
52d72555d0d42e9fc2c31eef4c8a667a
  $fShowExpr :: GHC.Show.Show Main.Expr
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Expr
                  Main.$fShowExpr_$cshowsPrec
                  Main.$fShowExpr_$cshow
                  Main.$fShowExpr_$cshowList -}
52d72555d0d42e9fc2c31eef4c8a667a
  $fShowExpr1 :: Main.Expr -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: Main.Expr) -> Main.$w$cshowsPrec1 0# w) -}
52d72555d0d42e9fc2c31eef4c8a667a
  $fShowExpr_$cshow :: Main.Expr -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Main.Expr) ->
                 Main.$fShowExpr_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
52d72555d0d42e9fc2c31eef4c8a667a
  $fShowExpr_$cshowList :: [Main.Expr] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ Main.Expr Main.$fShowExpr1) -}
52d72555d0d42e9fc2c31eef4c8a667a
  $fShowExpr_$cshowsPrec ::
    GHC.Types.Int -> Main.Expr -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Main.Expr) ->
                 case w of ww { GHC.Types.I# ww1 -> Main.$w$cshowsPrec1 ww1 w1 }) -}
e85930cbc8e124f3ab3408e57989cc80
  $s$fAlternativeParsecT ::
    GHC.Base.Alternative
      (Text.Megaparsec.Prim.ParsecT
         Text.Megaparsec.Error.Dec [GHC.Types.Char] m)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ (m :: * -> *).
                  @ (Text.Megaparsec.Prim.ParsecT
                       Text.Megaparsec.Error.Dec [GHC.Types.Char] m)
                  (Main.$s$fAlternativeParsecT_$s$fApplicativeParsecT @ m)
                  (Text.Megaparsec.Prim.$fAlternativeParsecT_$cempty
                     @ Text.Megaparsec.Error.Dec
                     @ [GHC.Types.Char]
                     @ m
                     Text.Megaparsec.Error.$fErrorComponentDec
                     Text.Megaparsec.Prim.$fStream[])
                  (Text.Megaparsec.Prim.$fAlternativeParsecT_$c<|>
                     @ Text.Megaparsec.Error.Dec
                     @ [GHC.Types.Char]
                     @ m
                     Text.Megaparsec.Error.$fErrorComponentDec
                     Text.Megaparsec.Prim.$fStream[])
                  (Text.Megaparsec.Prim.$fAlternativeParsecT_$csome
                     @ Text.Megaparsec.Error.Dec
                     @ [GHC.Types.Char]
                     @ m
                     Text.Megaparsec.Error.$fErrorComponentDec
                     Text.Megaparsec.Prim.$fStream[])
                  (Text.Megaparsec.Prim.$fAlternativeParsecT_$cmany
                     @ Text.Megaparsec.Error.Dec
                     @ [GHC.Types.Char]
                     @ m
                     Text.Megaparsec.Error.$fErrorComponentDec
                     Text.Megaparsec.Prim.$fStream[]) -}
0328557e0cf927b72c93270e84e22b3e
  $s$fAlternativeParsecT_$s$fApplicativeParsecT ::
    GHC.Base.Applicative
      (Text.Megaparsec.Prim.ParsecT
         Text.Megaparsec.Error.Dec [GHC.Types.Char] m)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ (m :: * -> *).
                  @ (Text.Megaparsec.Prim.ParsecT
                       Text.Megaparsec.Error.Dec [GHC.Types.Char] m)
                  (Main.$s$fAlternativeParsecT_$s$fApplicativeParsecT_$cp1Applicative
                     @ m)
                  (Text.Megaparsec.Prim.$fApplicativeParsecT_$cpure
                     @ Text.Megaparsec.Error.Dec
                     @ [GHC.Types.Char]
                     @ m
                     Text.Megaparsec.Error.$fErrorComponentDec
                     Text.Megaparsec.Prim.$fStream[])
                  (Text.Megaparsec.Prim.$fApplicativeParsecT_$c<*>
                     @ Text.Megaparsec.Error.Dec
                     @ [GHC.Types.Char]
                     @ m
                     Text.Megaparsec.Error.$fErrorComponentDec
                     Text.Megaparsec.Prim.$fStream[])
                  (Text.Megaparsec.Prim.$fApplicativeParsecT_$c*>
                     @ Text.Megaparsec.Error.Dec
                     @ [GHC.Types.Char]
                     @ m
                     Text.Megaparsec.Error.$fErrorComponentDec
                     Text.Megaparsec.Prim.$fStream[])
                  (Text.Megaparsec.Prim.$fApplicativeParsecT_$c<*
                     @ Text.Megaparsec.Error.Dec
                     @ [GHC.Types.Char]
                     @ m
                     Text.Megaparsec.Error.$fErrorComponentDec
                     Text.Megaparsec.Prim.$fStream[]) -}
424691015288581b76ff2d6646b7bfa1
  $s$fAlternativeParsecT_$s$fApplicativeParsecT_$cp1Applicative ::
    GHC.Base.Functor
      (Text.Megaparsec.Prim.ParsecT
         Text.Megaparsec.Error.Dec [GHC.Types.Char] m)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                (Text.Megaparsec.Prim.$fFunctorParsecT
                   @ Text.Megaparsec.Error.Dec
                   @ [GHC.Types.Char]) -}
04d710ba1c3bf5abf2d782401d792f87
  $s$fMonadParsecT ::
    GHC.Base.Monad
      (Text.Megaparsec.Prim.ParsecT
         Text.Megaparsec.Error.Dec [GHC.Types.Char] m)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ (m :: * -> *).
                  @ (Text.Megaparsec.Prim.ParsecT
                       Text.Megaparsec.Error.Dec [GHC.Types.Char] m)
                  (Text.Megaparsec.Prim.$fMonadParsecT_$cp1Monad
                     @ Text.Megaparsec.Error.Dec
                     @ [GHC.Types.Char]
                     @ m
                     Text.Megaparsec.Error.$fErrorComponentDec
                     Text.Megaparsec.Prim.$fStream[])
                  (Text.Megaparsec.Prim.$fMonadParsecT_$c>>=
                     @ Text.Megaparsec.Error.Dec
                     @ [GHC.Types.Char]
                     @ m
                     Text.Megaparsec.Error.$fErrorComponentDec
                     Text.Megaparsec.Prim.$fStream[])
                  (Text.Megaparsec.Prim.$fMonadParsecT_$c>>
                     @ Text.Megaparsec.Error.Dec
                     @ [GHC.Types.Char]
                     @ m
                     Text.Megaparsec.Error.$fErrorComponentDec
                     Text.Megaparsec.Prim.$fStream[])
                  (Text.Megaparsec.Prim.$fMonadParsecT_$creturn
                     @ Text.Megaparsec.Error.Dec
                     @ [GHC.Types.Char]
                     @ m
                     Text.Megaparsec.Error.$fErrorComponentDec
                     Text.Megaparsec.Prim.$fStream[])
                  (Text.Megaparsec.Prim.$fMonadParsecT_$cfail
                     @ Text.Megaparsec.Error.Dec
                     @ [GHC.Types.Char]
                     @ m
                     Text.Megaparsec.Error.$fErrorComponentDec
                     Text.Megaparsec.Prim.$fStream[]) -}
9651aa39df2b976b99291e40c95d952f
  $s$fMonadParsecesParsecT ::
    Text.Megaparsec.Prim.MonadParsec
      Text.Megaparsec.Error.Dec
      [GHC.Types.Char]
      (Text.Megaparsec.Prim.ParsecT
         Text.Megaparsec.Error.Dec [GHC.Types.Char] m)
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ (m :: * -> *).
                  @ Text.Megaparsec.Error.Dec
                  @ [GHC.Types.Char]
                  @ (Text.Megaparsec.Prim.ParsecT
                       Text.Megaparsec.Error.Dec [GHC.Types.Char] m)
                  (Main.$s$fMonadParsecesParsecT_$s$fMonadParsecesParsecT_$cp1MonadParsec
                     @ m)
                  (Main.$s$fMonadParsecesParsecT_$s$fMonadParsecesParsecT_$cp2MonadParsec
                     @ m)
                  (Main.$s$fAlternativeParsecT @ m)
                  (Main.$s$fMonadParsecesParsecT_$s$fMonadPlusParsecT @ m)
                  (Text.Megaparsec.Prim.$fMonadParsecesParsecT_$cfailure
                     @ Text.Megaparsec.Error.Dec
                     @ [GHC.Types.Char]
                     @ m
                     Text.Megaparsec.Error.$fErrorComponentDec
                     Text.Megaparsec.Prim.$fStream[])
                  (Main.$s$fMonadParsecesParsecT_$s$fMonadParsecesParsecT_$clabel
                     @ m)
                  (Main.$s$fMonadParsecesParsecT_$s$fMonadParsecesParsecT_$chidden
                     @ m)
                  (Text.Megaparsec.Prim.$fMonadParsecesParsecT_$ctry
                     @ Text.Megaparsec.Error.Dec
                     @ [GHC.Types.Char]
                     @ m
                     Text.Megaparsec.Error.$fErrorComponentDec
                     Text.Megaparsec.Prim.$fStream[])
                  (Text.Megaparsec.Prim.$fMonadParsecesParsecT_$clookAhead
                     @ Text.Megaparsec.Error.Dec
                     @ [GHC.Types.Char]
                     @ m
                     Text.Megaparsec.Error.$fErrorComponentDec
                     Text.Megaparsec.Prim.$fStream[])
                  (Text.Megaparsec.Prim.$fMonadParsecesParsecT_$cnotFollowedBy
                     @ Text.Megaparsec.Error.Dec
                     @ [GHC.Types.Char]
                     @ m
                     Text.Megaparsec.Error.$fErrorComponentDec
                     Text.Megaparsec.Prim.$fStream[])
                  (Text.Megaparsec.Prim.$fMonadParsecesParsecT_$cwithRecovery
                     @ Text.Megaparsec.Error.Dec
                     @ [GHC.Types.Char]
                     @ m
                     Text.Megaparsec.Error.$fErrorComponentDec
                     Text.Megaparsec.Prim.$fStream[])
                  (Text.Megaparsec.Prim.$fMonadParsecesParsecT_$cobserving
                     @ Text.Megaparsec.Error.Dec
                     @ [GHC.Types.Char]
                     @ m
                     Text.Megaparsec.Error.$fErrorComponentDec
                     Text.Megaparsec.Prim.$fStream[])
                  (Text.Megaparsec.Prim.$fMonadParsecesParsecT_$ceof
                     @ Text.Megaparsec.Error.Dec
                     @ [GHC.Types.Char]
                     @ m
                     Text.Megaparsec.Error.$fErrorComponentDec
                     Text.Megaparsec.Prim.$fStream[])
                  (Main.$s$fMonadParsecesParsecT_$s$fMonadParsecesParsecT_$ctoken
                     @ m)
                  (Text.Megaparsec.Prim.$fMonadParsecesParsecT_$ctokens
                     @ Text.Megaparsec.Error.Dec
                     @ [GHC.Types.Char]
                     @ m
                     Text.Megaparsec.Error.$fErrorComponentDec
                     Text.Megaparsec.Prim.$fStream[])
                  (Text.Megaparsec.Prim.$fMonadParsecesParsecT_$cgetParserState
                     @ Text.Megaparsec.Error.Dec
                     @ [GHC.Types.Char]
                     @ m
                     Text.Megaparsec.Error.$fErrorComponentDec
                     Text.Megaparsec.Prim.$fStream[])
                  (Text.Megaparsec.Prim.$fMonadParsecesParsecT_$cupdateParserState
                     @ Text.Megaparsec.Error.Dec
                     @ [GHC.Types.Char]
                     @ m
                     Text.Megaparsec.Error.$fErrorComponentDec
                     Text.Megaparsec.Prim.$fStream[]) -}
940cc028013e02772061135d4c804836
  $s$fMonadParsecesParsecT_$s$fMonadParsecesParsecT_$chidden ::
    Text.Megaparsec.Prim.ParsecT
      Text.Megaparsec.Error.Dec [GHC.Types.Char] m a
    -> Text.Megaparsec.Prim.ParsecT
         Text.Megaparsec.Error.Dec [GHC.Types.Char] m a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <C(C(C(C(C(S))))),1*C1(C1(C1(C1(C1(U)))))><L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, False)
                (\ @ (m :: * -> *)
                   @ a
                   (eta2 :: Text.Megaparsec.Prim.ParsecT
                              Text.Megaparsec.Error.Dec [GHC.Types.Char] m a) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall b.
                      Text.Megaparsec.Prim.State [GHC.Types.Char]
                      -> (a
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                          -> m b)
                      -> (Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            Text.Megaparsec.Error.Dec
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char] -> m b)
                      -> (a
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                          -> m b)
                      -> (Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            Text.Megaparsec.Error.Dec
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char] -> m b)
                      -> m b)
                   @ (Text.Megaparsec.Prim.ParsecT
                        Text.Megaparsec.Error.Dec [GHC.Types.Char] m a)
                   (\ (tpl :: forall b.
                              Text.Megaparsec.Prim.State [GHC.Types.Char]
                              -> (a
                                  -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                                  -> Text.Megaparsec.Prim.Hints
                                       (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                                  -> m b)
                              -> (Text.Megaparsec.Error.ParseError
                                    (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                                    Text.Megaparsec.Error.Dec
                                  -> Text.Megaparsec.Prim.State [GHC.Types.Char] -> m b)
                              -> (a
                                  -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                                  -> Text.Megaparsec.Prim.Hints
                                       (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                                  -> m b)
                              -> (Text.Megaparsec.Error.ParseError
                                    (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                                    Text.Megaparsec.Error.Dec
                                  -> Text.Megaparsec.Prim.State [GHC.Types.Char] -> m b)
                              -> m b) ->
                    tpl)
                     `cast`
                   (<forall b.
                     Text.Megaparsec.Prim.State [GHC.Types.Char]
                     -> (a
                         -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                         -> Text.Megaparsec.Prim.Hints
                              (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                         -> m b)
                     -> (Text.Megaparsec.Error.ParseError
                           (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                           Text.Megaparsec.Error.Dec
                         -> Text.Megaparsec.Prim.State [GHC.Types.Char] -> m b)
                     -> (a
                         -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                         -> Text.Megaparsec.Prim.Hints
                              (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                         -> m b)
                     -> (Text.Megaparsec.Error.ParseError
                           (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                           Text.Megaparsec.Error.Dec
                         -> Text.Megaparsec.Prim.State [GHC.Types.Char] -> m b)
                     -> m b>_R
                    ->_R Sym (Text.Megaparsec.Prim.N:ParsecT[0]
                                  <Text.Megaparsec.Error.Dec>_N <[GHC.Types.Char]>_N <m>_R <a>_R))
                   (\ @ b
                      (s1 :: Text.Megaparsec.Prim.State [GHC.Types.Char])
                      (cok :: a
                              -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                              -> Text.Megaparsec.Prim.Hints
                                   (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                              -> m b)
                      (cerr :: Text.Megaparsec.Error.ParseError
                                 (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                                 Text.Megaparsec.Error.Dec
                               -> Text.Megaparsec.Prim.State [GHC.Types.Char] -> m b)
                      (eok :: a
                              -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                              -> Text.Megaparsec.Prim.Hints
                                   (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                              -> m b)
                      (eerr :: Text.Megaparsec.Error.ParseError
                                 (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                                 Text.Megaparsec.Error.Dec
                               -> Text.Megaparsec.Prim.State [GHC.Types.Char] -> m b) ->
                    let {
                      cl :: GHC.Base.Maybe
                              (Text.Megaparsec.Error.ErrorItem
                                 (Text.Megaparsec.Prim.Token [GHC.Types.Char]))
                      = Text.Megaparsec.Prim.$fMonadParsecesParsecT_$s<$>
                          @ (Data.List.NonEmpty.NonEmpty GHC.Types.Char)
                          @ (Text.Megaparsec.Error.ErrorItem
                               (Text.Megaparsec.Prim.Token [GHC.Types.Char]))
                          (\ (x :: Data.List.NonEmpty.NonEmpty GHC.Types.Char)[OneShot] ->
                           Text.Megaparsec.Error.Label
                             @ (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                             (Data.Semigroup.$fSemigroupNonEmpty_$c<>
                                @ GHC.Types.Char
                                (Data.List.NonEmpty.fromList
                                   @ GHC.Types.Char
                                   (GHC.Base.build
                                      @ GHC.Types.Char
                                      (\ @ b1 -> GHC.CString.unpackFoldrCString# @ b1 "rest of "#)))
                                x))
                          (Data.List.NonEmpty.nonEmpty
                             @ GHC.Types.Char
                             (GHC.Types.[] @ GHC.Types.Char))
                    } in
                    let {
                      el :: GHC.Base.Maybe
                              (Text.Megaparsec.Error.ErrorItem
                                 (Text.Megaparsec.Prim.Token [GHC.Types.Char]))
                      = Text.Megaparsec.Prim.$fMonadParsecesParsecT_$s<$>
                          @ (Data.List.NonEmpty.NonEmpty GHC.Types.Char)
                          @ (Text.Megaparsec.Error.ErrorItem
                               (Text.Megaparsec.Prim.Token [GHC.Types.Char]))
                          (Text.Megaparsec.Error.Label
                             @ (Text.Megaparsec.Prim.Token [GHC.Types.Char]))
                          (Data.List.NonEmpty.nonEmpty
                             @ GHC.Types.Char
                             (GHC.Types.[] @ GHC.Types.Char))
                    } in
                    Text.Megaparsec.Prim.unParser
                      @ Text.Megaparsec.Error.Dec
                      @ [GHC.Types.Char]
                      @ m
                      @ a
                      eta2
                      @ b
                      s1
                      (\ (x :: a)
                         (s' :: Text.Megaparsec.Prim.State [GHC.Types.Char])
                         (hs :: Text.Megaparsec.Prim.Hints
                                  (Text.Megaparsec.Prim.Token [GHC.Types.Char])) ->
                       cok
                         x
                         s'
                         (Text.Megaparsec.Prim.refreshLastHint
                            @ (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            hs
                            cl))
                      cerr
                      (\ (x :: a)
                         (s' :: Text.Megaparsec.Prim.State [GHC.Types.Char])
                         (hs :: Text.Megaparsec.Prim.Hints
                                  (Text.Megaparsec.Prim.Token [GHC.Types.Char])) ->
                       eok
                         x
                         s'
                         (Text.Megaparsec.Prim.refreshLastHint
                            @ (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            hs
                            el))
                      (\ (err :: Text.Megaparsec.Error.ParseError
                                   (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                                   Text.Megaparsec.Error.Dec) ->
                       eerr
                         (case err of wild { Text.Megaparsec.Error.ParseError ds ds1 ds2 ds3 ->
                          Text.Megaparsec.Error.ParseError
                            @ (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            @ Text.Megaparsec.Error.Dec
                            ds
                            ds1
                            (Data.Maybe.maybe
                               @ (Data.Set.Base.Set
                                    (Text.Megaparsec.Error.ErrorItem
                                       (Text.Megaparsec.Prim.Token [GHC.Types.Char])))
                               @ (Text.Megaparsec.Error.ErrorItem
                                    (Text.Megaparsec.Prim.Token [GHC.Types.Char]))
                               (Data.Set.Base.Tip
                                  @ (Text.Megaparsec.Error.ErrorItem
                                       (Text.Megaparsec.Prim.Token [GHC.Types.Char])))
                               (Data.Set.Base.singleton
                                  @ (Text.Megaparsec.Error.ErrorItem
                                       (Text.Megaparsec.Prim.Token [GHC.Types.Char])))
                               el)
                            ds3 })))) -}
362accb4c941149ba5f49373c9ce435c
  $s$fMonadParsecesParsecT_$s$fMonadParsecesParsecT_$clabel ::
    GHC.Base.String
    -> Text.Megaparsec.Prim.ParsecT
         Text.Megaparsec.Error.Dec [GHC.Types.Char] m a
    -> Text.Megaparsec.Prim.ParsecT
         Text.Megaparsec.Error.Dec [GHC.Types.Char] m a
  {- Arity: 2, Strictness: <L,U><L,C(C1(C1(C1(C1(U)))))>,
     Unfolding: InlineRule (0, True, True)
                (Text.Megaparsec.Prim.pLabel
                   @ Text.Megaparsec.Error.Dec
                   @ [GHC.Types.Char]) -}
d6f88def33b90798e879d68807479e70
  $s$fMonadParsecesParsecT_$s$fMonadParsecesParsecT_$cp1MonadParsec ::
    Text.Megaparsec.Error.ErrorComponent Text.Megaparsec.Error.Dec
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                (\ @ (m :: * -> *) -> Text.Megaparsec.Error.$fErrorComponentDec) -}
d08cb62159cc4ff77c4febf9ace0a2da
  $s$fMonadParsecesParsecT_$s$fMonadParsecesParsecT_$cp2MonadParsec ::
    Text.Megaparsec.Prim.Stream [GHC.Types.Char]
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                (\ @ (m :: * -> *) -> Text.Megaparsec.Prim.$fStream[]) -}
401c86680e87a96d4dac8b644903eb0c
  $s$fMonadParsecesParsecT_$s$fMonadParsecesParsecT_$ctoken ::
    (Text.Megaparsec.Prim.Token [GHC.Types.Char]
     -> Data.Either.Either
          (Data.Set.Base.Set
             (Text.Megaparsec.Error.ErrorItem
                (Text.Megaparsec.Prim.Token [GHC.Types.Char])),
           Data.Set.Base.Set
             (Text.Megaparsec.Error.ErrorItem
                (Text.Megaparsec.Prim.Token [GHC.Types.Char])),
           Data.Set.Base.Set Text.Megaparsec.Error.Dec)
          a)
    -> GHC.Base.Maybe (Text.Megaparsec.Prim.Token [GHC.Types.Char])
    -> Text.Megaparsec.Prim.ParsecT
         Text.Megaparsec.Error.Dec [GHC.Types.Char] m a
  {- Arity: 7,
     Strictness: <L,1*C1(U)><L,1*U><S(SSLL),1*U(U,U(U(U,U,U),U),U,U(U))><L,1*C1(C1(C1(U)))><L,A><L,A><L,1*C1(C1(U))>,
     Unfolding: InlineRule (0, True, False)
                (\ @ (m :: * -> *)
                   @ a
                   (eta2 :: Text.Megaparsec.Prim.Token [GHC.Types.Char]
                            -> Data.Either.Either
                                 (Data.Set.Base.Set
                                    (Text.Megaparsec.Error.ErrorItem
                                       (Text.Megaparsec.Prim.Token [GHC.Types.Char])),
                                  Data.Set.Base.Set
                                    (Text.Megaparsec.Error.ErrorItem
                                       (Text.Megaparsec.Prim.Token [GHC.Types.Char])),
                                  Data.Set.Base.Set Text.Megaparsec.Error.Dec)
                                 a)
                   (eta3 :: GHC.Base.Maybe
                              (Text.Megaparsec.Prim.Token [GHC.Types.Char])) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall b.
                      Text.Megaparsec.Prim.State [GHC.Types.Char]
                      -> (a
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                          -> m b)
                      -> (Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            Text.Megaparsec.Error.Dec
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char] -> m b)
                      -> (a
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                          -> m b)
                      -> (Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            Text.Megaparsec.Error.Dec
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char] -> m b)
                      -> m b)
                   @ (Text.Megaparsec.Prim.ParsecT
                        Text.Megaparsec.Error.Dec [GHC.Types.Char] m a)
                   (\ (tpl :: forall b.
                              Text.Megaparsec.Prim.State [GHC.Types.Char]
                              -> (a
                                  -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                                  -> Text.Megaparsec.Prim.Hints
                                       (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                                  -> m b)
                              -> (Text.Megaparsec.Error.ParseError
                                    (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                                    Text.Megaparsec.Error.Dec
                                  -> Text.Megaparsec.Prim.State [GHC.Types.Char] -> m b)
                              -> (a
                                  -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                                  -> Text.Megaparsec.Prim.Hints
                                       (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                                  -> m b)
                              -> (Text.Megaparsec.Error.ParseError
                                    (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                                    Text.Megaparsec.Error.Dec
                                  -> Text.Megaparsec.Prim.State [GHC.Types.Char] -> m b)
                              -> m b) ->
                    tpl)
                     `cast`
                   (<forall b.
                     Text.Megaparsec.Prim.State [GHC.Types.Char]
                     -> (a
                         -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                         -> Text.Megaparsec.Prim.Hints
                              (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                         -> m b)
                     -> (Text.Megaparsec.Error.ParseError
                           (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                           Text.Megaparsec.Error.Dec
                         -> Text.Megaparsec.Prim.State [GHC.Types.Char] -> m b)
                     -> (a
                         -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                         -> Text.Megaparsec.Prim.Hints
                              (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                         -> m b)
                     -> (Text.Megaparsec.Error.ParseError
                           (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                           Text.Megaparsec.Error.Dec
                         -> Text.Megaparsec.Prim.State [GHC.Types.Char] -> m b)
                     -> m b>_R
                    ->_R Sym (Text.Megaparsec.Prim.N:ParsecT[0]
                                  <Text.Megaparsec.Error.Dec>_N <[GHC.Types.Char]>_N <m>_R <a>_R))
                   (\ @ b
                      (s1 :: Text.Megaparsec.Prim.State [GHC.Types.Char])
                      (cok :: a
                              -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                              -> Text.Megaparsec.Prim.Hints
                                   (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                              -> m b)
                      (ds :: Text.Megaparsec.Error.ParseError
                               (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                               Text.Megaparsec.Error.Dec
                             -> Text.Megaparsec.Prim.State [GHC.Types.Char] -> m b)
                      (ds1 :: a
                              -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                              -> Text.Megaparsec.Prim.Hints
                                   (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                              -> m b)
                      (eerr :: Text.Megaparsec.Error.ParseError
                                 (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                                 Text.Megaparsec.Error.Dec
                               -> Text.Megaparsec.Prim.State [GHC.Types.Char] -> m b) ->
                    case s1 of wild { Text.Megaparsec.Prim.State input ds2 dt w ->
                    case ds2 of wild1 { Data.List.NonEmpty.:| pos z ->
                    case input of wild2 {
                      []
                      -> eerr
                           (Text.Megaparsec.Error.ParseError
                              @ (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                              @ Text.Megaparsec.Error.Dec
                              (Data.List.NonEmpty.:| @ Text.Megaparsec.Pos.SourcePos pos z)
                              (Data.Set.Base.Bin
                                 @ (Text.Megaparsec.Error.ErrorItem
                                      (Text.Megaparsec.Prim.Token [GHC.Types.Char]))
                                 1#
                                 (Text.Megaparsec.Error.EndOfInput
                                    @ (Text.Megaparsec.Prim.Token [GHC.Types.Char]))
                                 (Data.Set.Base.Tip
                                    @ (Text.Megaparsec.Error.ErrorItem
                                         (Text.Megaparsec.Prim.Token [GHC.Types.Char])))
                                 (Data.Set.Base.Tip
                                    @ (Text.Megaparsec.Error.ErrorItem
                                         (Text.Megaparsec.Prim.Token [GHC.Types.Char]))))
                              (Data.Maybe.maybe
                                 @ (Data.Set.Base.Set
                                      (Text.Megaparsec.Error.ErrorItem
                                         (Text.Megaparsec.Prim.Token [GHC.Types.Char])))
                                 @ (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                                 (Data.Set.Base.Tip
                                    @ (Text.Megaparsec.Error.ErrorItem
                                         (Text.Megaparsec.Prim.Token [GHC.Types.Char])))
                                 (\ (x :: Text.Megaparsec.Prim.Token [GHC.Types.Char])[OneShot] ->
                                  Data.Set.Base.Bin
                                    @ (Text.Megaparsec.Error.ErrorItem
                                         (Text.Megaparsec.Prim.Token [GHC.Types.Char]))
                                    1#
                                    (Text.Megaparsec.Error.Tokens
                                       @ (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                                       (Text.Megaparsec.Prim.nes
                                          @ (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                                          x))
                                    (Data.Set.Base.Tip
                                       @ (Text.Megaparsec.Error.ErrorItem
                                            (Text.Megaparsec.Prim.Token [GHC.Types.Char])))
                                    (Data.Set.Base.Tip
                                       @ (Text.Megaparsec.Error.ErrorItem
                                            (Text.Megaparsec.Prim.Token [GHC.Types.Char]))))
                                 eta3)
                              (Data.Set.Base.Tip @ Text.Megaparsec.Error.Dec))
                           wild
                      : t ts
                      -> case eta2
                                t `cast`
                                (Sub (Sym (Text.Megaparsec.Prim.D:R:Token[][0]))) of wild4 {
                           Data.Either.Left ds4
                           -> case ds4 of wild5 { (,,) us ps xs ->
                              case GHC.Base.const
                                     @ (Text.Megaparsec.Pos.Pos
                                        -> Text.Megaparsec.Pos.SourcePos
                                        -> GHC.Types.Char
                                        -> (Text.Megaparsec.Pos.SourcePos,
                                            Text.Megaparsec.Pos.SourcePos))
                                     @ (Data.Proxy.Proxy GHC.Base.String)
                                     Text.Megaparsec.Pos.defaultUpdatePos
                                     (Data.Proxy.Proxy @ * @ [GHC.Types.Char])
                                     w
                                     pos
                                     t of wild6 { (,) apos npos ->
                              case apos of apos1 { Text.Megaparsec.Pos.SourcePos ipv ipv1 ipv2 ->
                              eerr
                                (Text.Megaparsec.Error.ParseError
                                   @ (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                                   @ Text.Megaparsec.Error.Dec
                                   (Data.List.NonEmpty.:| @ Text.Megaparsec.Pos.SourcePos apos1 z)
                                   us
                                   ps
                                   xs)
                                (Text.Megaparsec.Prim.State
                                   @ [GHC.Types.Char]
                                   wild2
                                   (Data.List.NonEmpty.:| @ Text.Megaparsec.Pos.SourcePos apos1 z)
                                   dt
                                   w) } } }
                           Data.Either.Right x
                           -> case GHC.Base.const
                                     @ (Text.Megaparsec.Pos.Pos
                                        -> Text.Megaparsec.Pos.SourcePos
                                        -> GHC.Types.Char
                                        -> (Text.Megaparsec.Pos.SourcePos,
                                            Text.Megaparsec.Pos.SourcePos))
                                     @ (Data.Proxy.Proxy GHC.Base.String)
                                     Text.Megaparsec.Pos.defaultUpdatePos
                                     (Data.Proxy.Proxy @ * @ [GHC.Types.Char])
                                     w
                                     pos
                                     t of wild5 { (,) apos npos ->
                              case npos of npos1 { Text.Megaparsec.Pos.SourcePos ipv ipv1 ipv2 ->
                              cok
                                x
                                (case GHC.Num.$fNumWord_$c+
                                        (GHC.Types.W# dt)
                                        (GHC.Types.W# 1##) of dt1 { GHC.Types.W# dt2 ->
                                 Text.Megaparsec.Prim.State
                                   @ [GHC.Types.Char]
                                   ts
                                   (Data.List.NonEmpty.:| @ Text.Megaparsec.Pos.SourcePos npos1 z)
                                   dt2
                                   w })
                                (Text.Megaparsec.Prim.$fApplicativeParsecT_$cmempty
                                   @ (Text.Megaparsec.Prim.Token [GHC.Types.Char])) } } } } } })) -}
1bfb51ce19e8d40a4a3dc938ad15737f
  $s$fMonadParsecesParsecT_$s$fMonadPlusParsecT ::
    GHC.Base.MonadPlus
      (Text.Megaparsec.Prim.ParsecT
         Text.Megaparsec.Error.Dec [GHC.Types.Char] m)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ (m :: * -> *).
                  @ (Text.Megaparsec.Prim.ParsecT
                       Text.Megaparsec.Error.Dec [GHC.Types.Char] m)
                  (Text.Megaparsec.Prim.$fMonadPlusParsecT_$cp1MonadPlus
                     @ Text.Megaparsec.Error.Dec
                     @ [GHC.Types.Char]
                     @ m
                     Text.Megaparsec.Error.$fErrorComponentDec
                     Text.Megaparsec.Prim.$fStream[])
                  (Main.$s$fMonadParsecT @ m)
                  (Text.Megaparsec.Prim.$fAlternativeParsecT_$cmzero
                     @ Text.Megaparsec.Error.Dec
                     @ [GHC.Types.Char]
                     @ m
                     Text.Megaparsec.Error.$fErrorComponentDec
                     Text.Megaparsec.Prim.$fStream[])
                  (Text.Megaparsec.Prim.$fAlternativeParsecT_$cmplus
                     @ Text.Megaparsec.Error.Dec
                     @ [GHC.Types.Char]
                     @ m
                     Text.Megaparsec.Error.$fErrorComponentDec
                     Text.Megaparsec.Prim.$fStream[]) -}
91bea40bc5474f9478ed67de0571f4f2
  $sbetween ::
    Text.Megaparsec.Prim.ParsecT
      Text.Megaparsec.Error.Dec
      GHC.Base.String
      Data.Functor.Identity.Identity
      open
    -> Text.Megaparsec.Prim.ParsecT
         Text.Megaparsec.Error.Dec
         GHC.Base.String
         Data.Functor.Identity.Identity
         close
    -> Text.Megaparsec.Prim.ParsecT
         Text.Megaparsec.Error.Dec
         GHC.Base.String
         Data.Functor.Identity.Identity
         a
    -> Text.Megaparsec.Prim.ParsecT
         Text.Megaparsec.Error.Dec
         GHC.Base.String
         Data.Functor.Identity.Identity
         a
  {- Arity: 8,
     Strictness: <C(C(C(C(C(S))))),1*C1(C1(C1(C1(C1(U)))))><L,C(C1(C1(C1(C1(U)))))><L,C(C1(C1(C1(C1(U)))))><L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ @ open
                   @ close
                   @ a
                   (open1 :: Text.Megaparsec.Prim.ParsecT
                               Text.Megaparsec.Error.Dec
                               GHC.Base.String
                               Data.Functor.Identity.Identity
                               open)
                   (close1 :: Text.Megaparsec.Prim.ParsecT
                                Text.Megaparsec.Error.Dec
                                GHC.Base.String
                                Data.Functor.Identity.Identity
                                close)
                   (p2 :: Text.Megaparsec.Prim.ParsecT
                            Text.Megaparsec.Error.Dec
                            GHC.Base.String
                            Data.Functor.Identity.Identity
                            a)
                   @ b
                   (eta2 :: Text.Megaparsec.Prim.State [GHC.Types.Char])
                   (eta3 :: a
                            -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                            -> Text.Megaparsec.Prim.Hints
                                 (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            -> Data.Functor.Identity.Identity b)
                   (eta4 :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                              Text.Megaparsec.Error.Dec
                            -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                            -> Data.Functor.Identity.Identity b)
                   (eta5 :: a
                            -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                            -> Text.Megaparsec.Prim.Hints
                                 (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            -> Data.Functor.Identity.Identity b)
                   (eta6 :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                              Text.Megaparsec.Error.Dec
                            -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                            -> Data.Functor.Identity.Identity b) ->
                 (Text.Megaparsec.Prim.$fApplicativeParsecT_$c<*
                    @ Text.Megaparsec.Error.Dec
                    @ [GHC.Types.Char]
                    @ Data.Functor.Identity.Identity
                    Text.Megaparsec.Error.$fErrorComponentDec
                    Text.Megaparsec.Prim.$fStream[]
                    @ a
                    @ close
                    (Text.Megaparsec.Prim.$fApplicativeParsecT_$c*>
                       @ Text.Megaparsec.Error.Dec
                       @ [GHC.Types.Char]
                       @ Data.Functor.Identity.Identity
                       Text.Megaparsec.Error.$fErrorComponentDec
                       Text.Megaparsec.Prim.$fStream[]
                       @ open
                       @ a
                       open1
                       p2)
                    close1)
                   `cast`
                 (Text.Megaparsec.Prim.N:ParsecT[0]
                      <Text.Megaparsec.Error.Dec>_N
                      <[GHC.Types.Char]>_N
                      <Data.Functor.Identity.Identity>_R
                      <a>_R)
                   @ b
                   eta2
                   eta3
                   eta4
                   eta5
                   eta6)
                  `cast`
                (forall (open :: <*>_N) (close :: <*>_N) (a :: <*>_N).
                 <Text.Megaparsec.Prim.ParsecT
                    Text.Megaparsec.Error.Dec
                    GHC.Base.String
                    Data.Functor.Identity.Identity
                    open>_R
                 ->_R <Text.Megaparsec.Prim.ParsecT
                         Text.Megaparsec.Error.Dec
                         GHC.Base.String
                         Data.Functor.Identity.Identity
                         close>_R
                 ->_R <Text.Megaparsec.Prim.ParsecT
                         Text.Megaparsec.Error.Dec
                         GHC.Base.String
                         Data.Functor.Identity.Identity
                         a>_R
                 ->_R Sym (Text.Megaparsec.Prim.N:ParsecT[0]
                               <Text.Megaparsec.Error.Dec>_N
                               <[GHC.Types.Char]>_N
                               <Data.Functor.Identity.Identity>_R
                               <a>_R)) -}
163461a2b2b46bd2d1ae42a96c7a3543
  $tc'Division :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10671476472606893046##
                   606092008745630615##
                   Main.$trModule
                   Main.$tc'Division1) -}
de49964d98fde56983ac4ea2013d3bb6
  $tc'Division1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Division"#) -}
535665e959f717122ec9c6b4474c4105
  $tc'Equation :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13015148405087389152##
                   2734086614516262866##
                   Main.$trModule
                   Main.$tc'Equation1) -}
1b9ac8b60d7b5fe8e8595ec87438cd5b
  $tc'Equation1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Equation"#) -}
516bc30f696b3758009ee1828838a94c
  $tc'Multiplication :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7887793017765836360##
                   10298567964532762349##
                   Main.$trModule
                   Main.$tc'Multiplication1) -}
c2c14da24b8467726fb4e7a4e69f838e
  $tc'Multiplication1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Multiplication"#) -}
4b868ba4a4a1d91add4a7121c92ae505
  $tc'Negation :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16606525300185440096##
                   6877404104402518798##
                   Main.$trModule
                   Main.$tc'Negation1) -}
881fa14c38f8d4e9f481eaf419677ce9
  $tc'Negation1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Negation"#) -}
5fe9f403f536f11ad9bb21236525f56d
  $tc'Reference :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3928509378062832896##
                   11132419751356253779##
                   Main.$trModule
                   Main.$tc'Reference1) -}
3bc5a048cf8f969781295236fe527874
  $tc'Reference1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Reference"#) -}
fe5828b5a947080fd24f635c9f92d133
  $tc'Subtraction :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   581420171469737186##
                   7611517286801897965##
                   Main.$trModule
                   Main.$tc'Subtraction1) -}
5bf0113a3bdac3417e6f1ba6fb90b54e
  $tc'Subtraction1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Subtraction"#) -}
04f2e6c1a99abb124299e74c77c95cad
  $tc'Sum :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4578598580951108790##
                   13817766789451806117##
                   Main.$trModule
                   Main.$tc'Sum1) -}
02a1587e7d82b69f7a8007a983d93a3f
  $tc'Sum1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Sum"#) -}
33c297e4f10fbbba251cf02c367ac7c7
  $tc'Value :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16660115178065400422##
                   5660111176610303188##
                   Main.$trModule
                   Main.$tc'Value1) -}
8408d332d48b28d39c4523e5750afb40
  $tc'Value1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Value"#) -}
ce20b4e6562af0579c846c78ac8b0c22
  $tcEquation :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11597552857794570855##
                   6377182577791424905##
                   Main.$trModule
                   Main.$tcEquation1) -}
5b1474796e07e619ad3373dd8ef9952b
  $tcEquation1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Equation"#) -}
8d73499634e7bf0308877baa74e00aa1
  $tcExpr :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17184784926851122164##
                   14253846562439778101##
                   Main.$trModule
                   Main.$tcExpr1) -}
e143fde900cf11339c0fc23fae568fb1
  $tcExpr1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Expr"#) -}
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
79b09f240a57c6bc43f96363e3b27e37
  $w$c/= ::
    GHC.Base.String
    -> Main.Expr -> GHC.Base.String -> Main.Expr -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.String)
                   (ww1 :: Main.Expr)
                   (ww2 :: GHC.Base.String)
                   (ww3 :: Main.Expr) ->
                 case GHC.Base.eqString ww ww2 of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True
                   -> case Main.$fEqEquation_$c== ww1 ww3 of wild1 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Types.False } }) -}
1670023db5bc430755f98a25134068f3
  $w$c== ::
    GHC.Base.String
    -> Main.Expr -> GHC.Base.String -> Main.Expr -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.String)
                   (ww1 :: Main.Expr)
                   (ww2 :: GHC.Base.String)
                   (ww3 :: Main.Expr) ->
                 case GHC.Base.eqString ww ww2 of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True -> Main.$fEqEquation_$c== ww1 ww3 }) -}
f599ef40f56ae3c2075f77ddabbba6e7
  $w$cshow :: GHC.Base.String -> Main.Expr -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.String) (ww1 :: Main.Expr) ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   Main.$fShowEquation2
                   (GHC.Types.:
                      @ GHC.Types.Char
                      GHC.Show.shows6
                      (GHC.Show.showLitString
                         ww
                         (GHC.Types.:
                            @ GHC.Types.Char
                            GHC.Show.shows6
                            (GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.showSpace1
                               (Main.$w$cshowsPrec1
                                  11#
                                  ww1
                                  (GHC.Types.[] @ GHC.Types.Char))))))) -}
fc2178e3076a58f7c790d12412dcb949
  $w$cshowsPrec ::
    GHC.Prim.Int# -> GHC.Base.String -> Main.Expr -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,U><L,U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Base.String)
                   (ww2 :: Main.Expr) ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = Main.$w$cshowsPrec1 11# ww2
                 } in
                 let {
                   p2 :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Main.$fShowEquation2
                       (GHC.Types.:
                          @ GHC.Types.Char
                          GHC.Show.shows6
                          (GHC.Show.showLitString
                             ww1
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.shows6
                                (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g x)))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p2
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (p2 (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x)) }) -}
52d72555d0d42e9fc2c31eef4c8a667a
  $w$cshowsPrec1 :: GHC.Prim.Int# -> Main.Expr -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0] -}
f8181a3d236b7923308215f144c8fd1b
  $weta1 ::
    [GHC.Types.Char]
    -> Text.Megaparsec.Pos.SourcePos
    -> [Text.Megaparsec.Pos.SourcePos]
    -> GHC.Prim.Word#
    -> Text.Megaparsec.Pos.Pos
    -> (GHC.Types.Char
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token [GHC.Types.Char])
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 7,
     Strictness: <S,U><L,U(U,U,U)><L,U><L,U><L,U(U)><L,1*C1(C1(C1(U)))><L,1*C1(C1(U))>,
     Inline: [0],
     Unfolding: (\ @ b
                   (ww :: [GHC.Types.Char])
                   (ww1 :: Text.Megaparsec.Pos.SourcePos)
                   (ww2 :: [Text.Megaparsec.Pos.SourcePos])
                   (ww3 :: GHC.Prim.Word#)
                   (ww4 :: Text.Megaparsec.Pos.Pos)
                   (w :: GHC.Types.Char
                         -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                         -> Text.Megaparsec.Prim.Hints
                              (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                         -> Data.Functor.Identity.Identity b)
                   (w1 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            Text.Megaparsec.Error.Dec
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Data.Functor.Identity.Identity b) ->
                 case ww of wild {
                   []
                   -> w1
                        (Text.Megaparsec.Error.ParseError
                           @ (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                           @ Text.Megaparsec.Error.Dec
                           (Data.List.NonEmpty.:| @ Text.Megaparsec.Pos.SourcePos ww1 ww2)
                           Main.sc3
                           Main.name5
                           (Data.Set.Base.Tip @ Text.Megaparsec.Error.Dec))
                        (Text.Megaparsec.Prim.State
                           @ [GHC.Types.Char]
                           (GHC.Types.[] @ GHC.Types.Char)
                           (Data.List.NonEmpty.:| @ Text.Megaparsec.Pos.SourcePos ww1 ww2)
                           ww3
                           ww4)
                   : t ts
                   -> case t of wild1 { GHC.Types.C# c# ->
                      case {__pkg_ccall base-4.9.1.0 u_iswalnum GHC.Prim.Int#
                                                                -> GHC.Prim.State#
                                                                     GHC.Prim.RealWorld
                                                                -> (# GHC.Prim.State#
                                                                        GHC.Prim.RealWorld,
                                                                      GHC.Prim.Int# #)}
                             (GHC.Prim.ord# c#)
                             GHC.Prim.realWorld# of wild2 { (#,#) ds ds1 ->
                      case ds1 of wild3 {
                        DEFAULT
                        -> case ww1 of ww5 { Text.Megaparsec.Pos.SourcePos ww6 ww7 ww8 ->
                           case case c# of ds2 {
                                  DEFAULT
                                  -> Text.Megaparsec.Pos.SourcePos
                                       ww6
                                       ww7
                                       (GHC.Prim.plusWord# ww8 1##)
                                  '\t'#
                                  -> case ww4
                                            `cast`
                                          (Text.Megaparsec.Pos.N:Pos[0]) of wild4 { GHC.Types.W# y# ->
                                     case y# of wild5 {
                                       DEFAULT
                                       -> case GHC.Prim.remWord#
                                                 (GHC.Prim.minusWord# ww8 1##)
                                                 wild5 of wild6 { DEFAULT ->
                                          let {
                                            x :: GHC.Prim.Word#
                                            = GHC.Prim.minusWord#
                                                (GHC.Prim.plusWord# ww8 wild5)
                                                wild6
                                          } in
                                          case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.ltWord# x 1##) of wild7 {
                                            GHC.Types.False
                                            -> Text.Megaparsec.Pos.SourcePos ww6 ww7 x
                                            GHC.Types.True
                                            -> case Text.Megaparsec.Pos.$fArbitraryPos2
                                               ret_ty Text.Megaparsec.Pos.SourcePos
                                               of {} } }
                                       0##
                                       -> case GHC.Real.divZeroError
                                          ret_ty Text.Megaparsec.Pos.SourcePos
                                          of {} } }
                                  '\n'#
                                  -> Text.Megaparsec.Pos.SourcePos
                                       ww6
                                       (GHC.Prim.plusWord# ww7 1##)
                                       1## } of npos1 { Text.Megaparsec.Pos.SourcePos ipv ipv1 ipv2 ->
                           w wild1
                             (Text.Megaparsec.Prim.State
                                @ [GHC.Types.Char]
                                ts
                                (Data.List.NonEmpty.:| @ Text.Megaparsec.Pos.SourcePos npos1 ww2)
                                (GHC.Prim.plusWord# ww3 1##)
                                ww4)
                             (GHC.Types.[]
                                @ (Data.Set.Base.Set
                                     (Text.Megaparsec.Error.ErrorItem
                                        (Text.Megaparsec.Prim.Token [GHC.Types.Char]))))
                               `cast`
                             (Sym (Text.Megaparsec.Prim.N:Hints[0]
                                       <Text.Megaparsec.Prim.Token [GHC.Types.Char]>_N)) } }
                        0#
                        -> case ww1 of ww5 { Text.Megaparsec.Pos.SourcePos ww6 ww7 ww8 ->
                           w1
                             (Text.Megaparsec.Error.ParseError
                                @ (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                                @ Text.Megaparsec.Error.Dec
                                (Data.List.NonEmpty.:| @ Text.Megaparsec.Pos.SourcePos ww5 ww2)
                                (Data.Set.Base.Bin
                                   @ (Text.Megaparsec.Error.ErrorItem GHC.Types.Char)
                                   1#
                                   (Text.Megaparsec.Error.Tokens
                                      @ GHC.Types.Char
                                      (Data.List.NonEmpty.:|
                                         @ GHC.Types.Char
                                         wild1
                                         (GHC.Types.[] @ GHC.Types.Char)))
                                   (Data.Set.Base.Tip
                                      @ (Text.Megaparsec.Error.ErrorItem GHC.Types.Char))
                                   (Data.Set.Base.Tip
                                      @ (Text.Megaparsec.Error.ErrorItem GHC.Types.Char)))
                                  `cast`
                                (Data.Set.Base.Set
                                   (Text.Megaparsec.Error.ErrorItem
                                      (Sym (Text.Megaparsec.Prim.D:R:Token[][0])))_N)_R
                                Main.name5
                                (Data.Set.Base.Tip @ Text.Megaparsec.Error.Dec))
                             (Text.Megaparsec.Prim.State
                                @ [GHC.Types.Char]
                                wild
                                (Data.List.NonEmpty.:| @ Text.Megaparsec.Pos.SourcePos ww5 ww2)
                                ww3
                                ww4) } } } } }) -}
92f200a5dacad85323b1c0cd9df1b77d
  $wg ::
    [Text.Megaparsec.Prim.Token [GHC.Types.Char]]
    -> forall b.
       Text.Megaparsec.Prim.State [GHC.Types.Char]
       -> ([Text.Megaparsec.Prim.Token [GHC.Types.Char]]
           -> Text.Megaparsec.Prim.State [GHC.Types.Char]
           -> Text.Megaparsec.Prim.Hints
                (Text.Megaparsec.Prim.Token [GHC.Types.Char])
           -> Data.Functor.Identity.Identity b)
       -> ([Text.Megaparsec.Prim.Token [GHC.Types.Char]]
           -> Text.Megaparsec.Prim.State [GHC.Types.Char]
           -> Text.Megaparsec.Prim.Hints
                (Text.Megaparsec.Prim.Token [GHC.Types.Char])
           -> Data.Functor.Identity.Identity b)
       -> (Text.Megaparsec.Error.ParseError
             (Text.Megaparsec.Prim.Token [GHC.Types.Char])
             Text.Megaparsec.Error.Dec
           -> Text.Megaparsec.Prim.State [GHC.Types.Char]
           -> Data.Functor.Identity.Identity b)
       -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <S,1*U><L,U(U,U(U(U,U,U),U),U,U(U))><L,C(C1(C1(U)))><L,1*C1(C1(C1(U)))><L,C(C1(U))>,
     Inline: [0] -}
35e885e814a47d7644e8ea905387d189
  $wp ::
    [GHC.Types.Char]
    -> Text.Megaparsec.Pos.SourcePos
    -> [Text.Megaparsec.Pos.SourcePos]
    -> GHC.Prim.Word#
    -> Text.Megaparsec.Pos.Pos
    -> ([GHC.Types.Char]
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token [GHC.Types.Char])
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token [GHC.Types.Char])
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 8,
     Strictness: <S,U><L,U(U,U,U)><L,U><L,U><L,U(U)><L,C(C1(C1(U)))><L,U><L,1*C1(C1(U))>,
     Inline: [0],
     Unfolding: (\ @ b1
                   (ww :: [GHC.Types.Char])
                   (ww1 :: Text.Megaparsec.Pos.SourcePos)
                   (ww2 :: [Text.Megaparsec.Pos.SourcePos])
                   (ww3 :: GHC.Prim.Word#)
                   (ww4 :: Text.Megaparsec.Pos.Pos)
                   (w :: [GHC.Types.Char]
                         -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                         -> Text.Megaparsec.Prim.Hints
                              (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                         -> Data.Functor.Identity.Identity b1)
                   (w1 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            Text.Megaparsec.Error.Dec
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Data.Functor.Identity.Identity b1)
                   (w2 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            Text.Megaparsec.Error.Dec
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Data.Functor.Identity.Identity b1) ->
                 case ww of wild {
                   []
                   -> w2
                        (Text.Megaparsec.Error.ParseError
                           @ (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                           @ Text.Megaparsec.Error.Dec
                           (Data.List.NonEmpty.:| @ Text.Megaparsec.Pos.SourcePos ww1 ww2)
                           Main.sc3
                           Main.name6
                           (Data.Set.Base.Tip @ Text.Megaparsec.Error.Dec))
                        (Text.Megaparsec.Prim.State
                           @ [GHC.Types.Char]
                           (GHC.Types.[] @ GHC.Types.Char)
                           (Data.List.NonEmpty.:| @ Text.Megaparsec.Pos.SourcePos ww1 ww2)
                           ww3
                           ww4)
                   : t ts
                   -> case t of ww5 { GHC.Types.C# ww6 ->
                      let {
                        $j :: GHC.Prim.Void# -> Data.Functor.Identity.Identity b1
                          {- Arity: 1, Strictness: <L,A> -}
                        = \ (w3 :: GHC.Prim.Void#)[OneShot] ->
                          case ww1 of ww7 { Text.Megaparsec.Pos.SourcePos ww8 ww9 ww10 ->
                          case case ww6 of ds1 {
                                 DEFAULT
                                 -> Text.Megaparsec.Pos.SourcePos
                                      ww8
                                      ww9
                                      (GHC.Prim.plusWord# ww10 1##)
                                 '\t'#
                                 -> case ww4
                                           `cast`
                                         (Text.Megaparsec.Pos.N:Pos[0]) of wild1 { GHC.Types.W# y# ->
                                    case y# of wild2 {
                                      DEFAULT
                                      -> case GHC.Prim.remWord#
                                                (GHC.Prim.minusWord# ww10 1##)
                                                wild2 of wild3 { DEFAULT ->
                                         let {
                                           x :: GHC.Prim.Word#
                                           = GHC.Prim.minusWord#
                                               (GHC.Prim.plusWord# ww10 wild2)
                                               wild3
                                         } in
                                         case GHC.Prim.tagToEnum#
                                                @ GHC.Types.Bool
                                                (GHC.Prim.ltWord# x 1##) of wild4 {
                                           GHC.Types.False
                                           -> Text.Megaparsec.Pos.SourcePos ww8 ww9 x
                                           GHC.Types.True
                                           -> case Text.Megaparsec.Pos.$fArbitraryPos2
                                              ret_ty Text.Megaparsec.Pos.SourcePos
                                              of {} } }
                                      0##
                                      -> case GHC.Real.divZeroError
                                         ret_ty Text.Megaparsec.Pos.SourcePos
                                         of {} } }
                                 '\n'#
                                 -> Text.Megaparsec.Pos.SourcePos
                                      ww8
                                      (GHC.Prim.plusWord# ww9 1##)
                                      1## } of npos1 { Text.Megaparsec.Pos.SourcePos ipv ipv1 ipv2 ->
                          Text.Megaparsec.Prim.$w$cmany
                            @ Text.Megaparsec.Error.Dec
                            @ [GHC.Types.Char]
                            @ Data.Functor.Identity.Identity
                            Text.Megaparsec.Prim.$fStream[]
                            @ GHC.Types.Char
                            Main.name4
                              `cast`
                            (Sym (Text.Megaparsec.Prim.N:ParsecT[0]
                                      <Text.Megaparsec.Error.Dec>_N
                                      <[GHC.Types.Char]>_N
                                      <Data.Functor.Identity.Identity>_R
                                      <GHC.Types.Char>_R))
                            @ b1
                            (Text.Megaparsec.Prim.State
                               @ [GHC.Types.Char]
                               ts
                               (Data.List.NonEmpty.:| @ Text.Megaparsec.Pos.SourcePos npos1 ww2)
                               (GHC.Prim.plusWord# ww3 1##)
                               ww4)
                            (\ (x :: [GHC.Types.Char]) ->
                             w (GHC.Types.: @ GHC.Types.Char ww5 x))
                            w1
                            (Text.Megaparsec.Prim.accHints
                               @ (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                               @ [GHC.Types.Char]
                               @ [GHC.Types.Char]
                               @ Data.Functor.Identity.Identity
                               @ b1
                               (GHC.Types.[]
                                  @ (Data.Set.Base.Set
                                       (Text.Megaparsec.Error.ErrorItem
                                          (Text.Megaparsec.Prim.Token [GHC.Types.Char]))))
                                 `cast`
                               (Sym (Text.Megaparsec.Prim.N:Hints[0]
                                         <Text.Megaparsec.Prim.Token [GHC.Types.Char]>_N))
                               (\ (x :: [GHC.Types.Char]) ->
                                w (GHC.Types.: @ GHC.Types.Char ww5 x))) } }
                      } in
                      case GHC.Unicode.$wgeneralCategory ww6 of wild1 {
                        DEFAULT
                        -> case ww1 of ww7 { Text.Megaparsec.Pos.SourcePos ww8 ww9 ww10 ->
                           w2
                             (Text.Megaparsec.Error.ParseError
                                @ (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                                @ Text.Megaparsec.Error.Dec
                                (Data.List.NonEmpty.:| @ Text.Megaparsec.Pos.SourcePos ww7 ww2)
                                (Data.Set.Base.Bin
                                   @ (Text.Megaparsec.Error.ErrorItem GHC.Types.Char)
                                   1#
                                   (Text.Megaparsec.Error.Tokens
                                      @ GHC.Types.Char
                                      (Data.List.NonEmpty.:|
                                         @ GHC.Types.Char
                                         ww5
                                         (GHC.Types.[] @ GHC.Types.Char)))
                                   (Data.Set.Base.Tip
                                      @ (Text.Megaparsec.Error.ErrorItem GHC.Types.Char))
                                   (Data.Set.Base.Tip
                                      @ (Text.Megaparsec.Error.ErrorItem GHC.Types.Char)))
                                  `cast`
                                (Data.Set.Base.Set
                                   (Text.Megaparsec.Error.ErrorItem
                                      (Sym (Text.Megaparsec.Prim.D:R:Token[][0])))_N)_R
                                Main.name6
                                (Data.Set.Base.Tip @ Text.Megaparsec.Error.Dec))
                             (Text.Megaparsec.Prim.State
                                @ [GHC.Types.Char]
                                wild
                                (Data.List.NonEmpty.:| @ Text.Megaparsec.Pos.SourcePos ww7 ww2)
                                ww3
                                ww4) }
                        GHC.Unicode.UppercaseLetter -> $j GHC.Prim.void#
                        GHC.Unicode.LowercaseLetter -> $j GHC.Prim.void#
                        GHC.Unicode.TitlecaseLetter -> $j GHC.Prim.void#
                        GHC.Unicode.ModifierLetter -> $j GHC.Prim.void#
                        GHC.Unicode.OtherLetter -> $j GHC.Prim.void# } } }) -}
7a1643bf5bed18b41d61f99745a97482
  $wprog ::
    [GHC.Types.Char]
    -> Text.Megaparsec.Pos.SourcePos
    -> [Text.Megaparsec.Pos.SourcePos]
    -> GHC.Prim.Word#
    -> Text.Megaparsec.Pos.Pos
    -> (()
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token [GHC.Types.Char])
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 7, HasNoCafRefs,
     Strictness: <S,U><L,U(U,U,U)><L,U><L,U><L,U><L,1*C1(C1(C1(U)))><L,1*C1(C1(U))>,
     Inline: [0],
     Unfolding: (\ @ b
                   (ww :: [GHC.Types.Char])
                   (ww1 :: Text.Megaparsec.Pos.SourcePos)
                   (ww2 :: [Text.Megaparsec.Pos.SourcePos])
                   (ww3 :: GHC.Prim.Word#)
                   (ww4 :: Text.Megaparsec.Pos.Pos)
                   (w :: ()
                         -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                         -> Text.Megaparsec.Prim.Hints
                              (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                         -> Data.Functor.Identity.Identity b)
                   (w1 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            Text.Megaparsec.Error.Dec
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Data.Functor.Identity.Identity b) ->
                 case ww of wild {
                   []
                   -> w GHC.Tuple.()
                        (Text.Megaparsec.Prim.State
                           @ [GHC.Types.Char]
                           (GHC.Types.[] @ GHC.Types.Char)
                           (Data.List.NonEmpty.:| @ Text.Megaparsec.Pos.SourcePos ww1 ww2)
                           ww3
                           ww4)
                        (GHC.Types.[]
                           @ (Data.Set.Base.Set
                                (Text.Megaparsec.Error.ErrorItem
                                   (Text.Megaparsec.Prim.Token [GHC.Types.Char]))))
                          `cast`
                        (Sym (Text.Megaparsec.Prim.N:Hints[0]
                                  <Text.Megaparsec.Prim.Token [GHC.Types.Char]>_N))
                   : t ts
                   -> case ww1 of ww5 { Text.Megaparsec.Pos.SourcePos ww6 ww7 ww8 ->
                      w1
                        (Text.Megaparsec.Error.ParseError
                           @ (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                           @ Text.Megaparsec.Error.Dec
                           (Data.List.NonEmpty.:| @ Text.Megaparsec.Pos.SourcePos ww5 ww2)
                           (Data.Set.Base.Bin
                              @ (Text.Megaparsec.Error.ErrorItem
                                   (Text.Megaparsec.Prim.Token [GHC.Types.Char]))
                              1#
                              (Text.Megaparsec.Error.Tokens
                                 @ (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                                 (Text.Megaparsec.Prim.nes
                                    @ (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                                    t `cast` (Sub (Sym (Text.Megaparsec.Prim.D:R:Token[][0])))))
                              (Data.Set.Base.Tip
                                 @ (Text.Megaparsec.Error.ErrorItem
                                      (Text.Megaparsec.Prim.Token [GHC.Types.Char])))
                              (Data.Set.Base.Tip
                                 @ (Text.Megaparsec.Error.ErrorItem
                                      (Text.Megaparsec.Prim.Token [GHC.Types.Char]))))
                           Main.sc3
                           (Data.Set.Base.Tip @ Text.Megaparsec.Error.Dec))
                        (Text.Megaparsec.Prim.State
                           @ [GHC.Types.Char]
                           wild
                           (Data.List.NonEmpty.:| @ Text.Megaparsec.Pos.SourcePos ww5 ww2)
                           ww3
                           ww4) } }) -}
4a32ee5d3ebeae1275a2363bfcb1e7ee
  $wprog1 ::
    Text.Megaparsec.Prim.State [GHC.Types.Char]
    -> ([Main.Equation]
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token [GHC.Types.Char])
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b)
    -> ([Main.Equation]
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ @ b
                   (w :: Text.Megaparsec.Prim.State [GHC.Types.Char])
                   (w1 :: [Main.Equation]
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                          -> Data.Functor.Identity.Identity b)
                   (w2 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            Text.Megaparsec.Error.Dec
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Data.Functor.Identity.Identity b)
                   (w3 :: [Main.Equation]
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                          -> Data.Functor.Identity.Identity b) ->
                 Main.prog_eta
                   `cast`
                 (Text.Megaparsec.Prim.N:ParsecT[0]
                      <Text.Megaparsec.Error.Dec>_N
                      <[GHC.Types.Char]>_N
                      <Data.Functor.Identity.Identity>_R
                      <[Main.Equation]>_R)
                   @ b
                   w
                   w1
                   w2
                   w3
                   (\ (err :: Text.Megaparsec.Error.ParseError
                                (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                                Text.Megaparsec.Error.Dec)
                      (ms :: Text.Megaparsec.Prim.State [GHC.Types.Char]) ->
                    w3
                      (GHC.Types.[] @ Main.Equation)
                      w
                      (case err of wild { Text.Megaparsec.Error.ParseError ds1 ds2 ds3 ds4 ->
                       case ds3 of wild1 {
                         Data.Set.Base.Bin dt ds7 ds8 ds9
                         -> (GHC.Types.:
                               @ (Data.Set.Base.Set
                                    (Text.Megaparsec.Error.ErrorItem
                                       (Text.Megaparsec.Prim.Token [GHC.Types.Char])))
                               wild1
                               (GHC.Types.[]
                                  @ (Data.Set.Base.Set
                                       (Text.Megaparsec.Error.ErrorItem
                                          (Text.Megaparsec.Prim.Token [GHC.Types.Char])))))
                              `cast`
                            (Sym (Text.Megaparsec.Prim.N:Hints[0]
                                      <Text.Megaparsec.Prim.Token [GHC.Types.Char]>_N))
                         Data.Set.Base.Tip
                         -> (GHC.Types.[]
                               @ (Data.Set.Base.Set
                                    (Text.Megaparsec.Error.ErrorItem
                                       (Text.Megaparsec.Prim.Token [GHC.Types.Char]))))
                              `cast`
                            (Sym (Text.Megaparsec.Prim.N:Hints[0]
                                      <Text.Megaparsec.Prim.Token [GHC.Types.Char]>_N)) } }))) -}
13fce5c33fe67afc9e7d4bd69f1989bb
  $wrawData ::
    [GHC.Types.Char]
    -> Text.Megaparsec.Pos.SourcePos
    -> [Text.Megaparsec.Pos.SourcePos]
    -> GHC.Prim.Word#
    -> Text.Megaparsec.Pos.Pos
    -> (()
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token [GHC.Types.Char])
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 7, HasNoCafRefs,
     Strictness: <S,U><L,U(U,U,U)><L,U><L,U><L,U><L,1*C1(C1(C1(U)))><L,1*C1(C1(U))>,
     Inline: [0],
     Unfolding: (\ @ b
                   (ww :: [GHC.Types.Char])
                   (ww1 :: Text.Megaparsec.Pos.SourcePos)
                   (ww2 :: [Text.Megaparsec.Pos.SourcePos])
                   (ww3 :: GHC.Prim.Word#)
                   (ww4 :: Text.Megaparsec.Pos.Pos)
                   (w :: ()
                         -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                         -> Text.Megaparsec.Prim.Hints
                              (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                         -> Data.Functor.Identity.Identity b)
                   (w1 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            Text.Megaparsec.Error.Dec
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Data.Functor.Identity.Identity b) ->
                 case ww of wild {
                   []
                   -> w GHC.Tuple.()
                        (Text.Megaparsec.Prim.State
                           @ [GHC.Types.Char]
                           (GHC.Types.[] @ GHC.Types.Char)
                           (Data.List.NonEmpty.:| @ Text.Megaparsec.Pos.SourcePos ww1 ww2)
                           ww3
                           ww4)
                        (GHC.Types.[]
                           @ (Data.Set.Base.Set
                                (Text.Megaparsec.Error.ErrorItem
                                   (Text.Megaparsec.Prim.Token [GHC.Types.Char]))))
                          `cast`
                        (Sym (Text.Megaparsec.Prim.N:Hints[0]
                                  <Text.Megaparsec.Prim.Token [GHC.Types.Char]>_N))
                   : t ts
                   -> case ww1 of ww5 { Text.Megaparsec.Pos.SourcePos ww6 ww7 ww8 ->
                      w1
                        (Text.Megaparsec.Error.ParseError
                           @ (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                           @ Text.Megaparsec.Error.Dec
                           (Data.List.NonEmpty.:| @ Text.Megaparsec.Pos.SourcePos ww5 ww2)
                           (Data.Set.Base.Bin
                              @ (Text.Megaparsec.Error.ErrorItem
                                   (Text.Megaparsec.Prim.Token [GHC.Types.Char]))
                              1#
                              (Text.Megaparsec.Error.Tokens
                                 @ (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                                 (Text.Megaparsec.Prim.nes
                                    @ (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                                    t `cast` (Sub (Sym (Text.Megaparsec.Prim.D:R:Token[][0])))))
                              (Data.Set.Base.Tip
                                 @ (Text.Megaparsec.Error.ErrorItem
                                      (Text.Megaparsec.Prim.Token [GHC.Types.Char])))
                              (Data.Set.Base.Tip
                                 @ (Text.Megaparsec.Error.ErrorItem
                                      (Text.Megaparsec.Prim.Token [GHC.Types.Char]))))
                           Main.sc3
                           (Data.Set.Base.Tip @ Text.Megaparsec.Error.Dec))
                        (Text.Megaparsec.Prim.State
                           @ [GHC.Types.Char]
                           wild
                           (Data.List.NonEmpty.:| @ Text.Megaparsec.Pos.SourcePos ww5 ww2)
                           ww3
                           ww4) } }) -}
cece8420cfca2f44048ce99047c5034a
  $wrawData1 ::
    Text.Megaparsec.Prim.State [GHC.Types.Char]
    -> ([Data.Either.Either
           (Text.Megaparsec.Error.ParseError
              GHC.Types.Char Text.Megaparsec.Error.Dec)
           Main.Equation]
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token [GHC.Types.Char])
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b)
    -> ([Data.Either.Either
           (Text.Megaparsec.Error.ParseError
              GHC.Types.Char Text.Megaparsec.Error.Dec)
           Main.Equation]
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ @ b
                   (w :: Text.Megaparsec.Prim.State [GHC.Types.Char])
                   (w1 :: [Data.Either.Either
                             (Text.Megaparsec.Error.ParseError
                                GHC.Types.Char Text.Megaparsec.Error.Dec)
                             Main.Equation]
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                          -> Data.Functor.Identity.Identity b)
                   (w2 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            Text.Megaparsec.Error.Dec
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Data.Functor.Identity.Identity b)
                   (w3 :: [Data.Either.Either
                             (Text.Megaparsec.Error.ParseError
                                GHC.Types.Char Text.Megaparsec.Error.Dec)
                             Main.Equation]
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                          -> Data.Functor.Identity.Identity b) ->
                 Main.rawData_eta
                   `cast`
                 (Text.Megaparsec.Prim.N:ParsecT[0]
                      <Text.Megaparsec.Error.Dec>_N
                      <[GHC.Types.Char]>_N
                      <Data.Functor.Identity.Identity>_R
                      <[Data.Either.Either
                          (Text.Megaparsec.Error.ParseError
                             GHC.Types.Char Text.Megaparsec.Error.Dec)
                          Main.Equation]>_R)
                   @ b
                   w
                   w1
                   w2
                   w3
                   (\ (err :: Text.Megaparsec.Error.ParseError
                                (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                                Text.Megaparsec.Error.Dec)
                      (ms :: Text.Megaparsec.Prim.State [GHC.Types.Char]) ->
                    w3
                      (GHC.Types.[]
                         @ (Data.Either.Either
                              (Text.Megaparsec.Error.ParseError
                                 GHC.Types.Char Text.Megaparsec.Error.Dec)
                              Main.Equation))
                      w
                      (case err of wild { Text.Megaparsec.Error.ParseError ds1 ds2 ds3 ds4 ->
                       case ds3 of wild1 {
                         Data.Set.Base.Bin dt ds7 ds8 ds9
                         -> (GHC.Types.:
                               @ (Data.Set.Base.Set
                                    (Text.Megaparsec.Error.ErrorItem
                                       (Text.Megaparsec.Prim.Token [GHC.Types.Char])))
                               wild1
                               (GHC.Types.[]
                                  @ (Data.Set.Base.Set
                                       (Text.Megaparsec.Error.ErrorItem
                                          (Text.Megaparsec.Prim.Token [GHC.Types.Char])))))
                              `cast`
                            (Sym (Text.Megaparsec.Prim.N:Hints[0]
                                      <Text.Megaparsec.Prim.Token [GHC.Types.Char]>_N))
                         Data.Set.Base.Tip
                         -> (GHC.Types.[]
                               @ (Data.Set.Base.Set
                                    (Text.Megaparsec.Error.ErrorItem
                                       (Text.Megaparsec.Prim.Token [GHC.Types.Char]))))
                              `cast`
                            (Sym (Text.Megaparsec.Prim.N:Hints[0]
                                      <Text.Megaparsec.Prim.Token [GHC.Types.Char]>_N)) } }))) -}
0cb0d26ebd0885555f92a427e34ad875
  data Equation = Equation GHC.Base.String Main.Expr
52d72555d0d42e9fc2c31eef4c8a667a
  data Expr
    = Value GHC.Types.Double
    | Reference GHC.Base.String
    | Negation Main.Expr
    | Sum Main.Expr Main.Expr
    | Subtraction Main.Expr Main.Expr
    | Multiplication Main.Expr Main.Expr
    | Division Main.Expr Main.Expr
c7035bceafa385e40ded49688fe72556
  type Program = [Main.Equation]
261c362af80a073682a145fce816cca7
  type RawData t e =
    [Data.Either.Either
       (Text.Megaparsec.Error.ParseError t e) Main.Equation]
9770feea6dbd136f5dba8231895dafdb
  equation :: Text.Megaparsec.String.Parser Main.Equation
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.equation1
                  `cast`
                (Sym (Text.Megaparsec.Prim.N:ParsecT[0]
                          <Text.Megaparsec.Error.Dec>_N
                          <[GHC.Types.Char]>_N
                          <Data.Functor.Identity.Identity>_R
                          <Main.Equation>_R)) -}
1f1d9f20e113524d7ce2a9bce9965bdb
  equation1 ::
    Text.Megaparsec.Prim.State [GHC.Types.Char]
    -> (Main.Equation
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token [GHC.Types.Char])
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b1)
    -> (Main.Equation
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token [GHC.Types.Char])
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U> -}
a4341badf3748603ea3dbcfba9e62622
  expr :: Text.Megaparsec.String.Parser Main.Expr
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Main.expr1
                  `cast`
                (Sym (Text.Megaparsec.Prim.N:ParsecT[0]
                          <Text.Megaparsec.Error.Dec>_N
                          <[GHC.Types.Char]>_N
                          <Data.Functor.Identity.Identity>_R
                          <Main.Expr>_R)) -}
d583db8067a8eaaa8bc4fee89db31b0c
  expr1 ::
    Text.Megaparsec.Prim.State [GHC.Types.Char]
    -> (Main.Expr
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token [GHC.Types.Char])
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b)
    -> (Main.Expr
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token [GHC.Types.Char])
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ b
                   (s1 :: Text.Megaparsec.Prim.State [GHC.Types.Char])
                   (cok :: Main.Expr
                           -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                           -> Text.Megaparsec.Prim.Hints
                                (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                           -> Data.Functor.Identity.Identity b)
                   (cerr :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                              Text.Megaparsec.Error.Dec
                            -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                            -> Data.Functor.Identity.Identity b)
                   (eok :: Main.Expr
                           -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                           -> Text.Megaparsec.Prim.Hints
                                (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                           -> Data.Functor.Identity.Identity b)
                   (eerr :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                              Text.Megaparsec.Error.Dec
                            -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                            -> Data.Functor.Identity.Identity b) ->
                 Main.expr_p
                   `cast`
                 (Text.Megaparsec.Prim.N:ParsecT[0]
                      <Text.Megaparsec.Error.Dec>_N
                      <[GHC.Types.Char]>_N
                      <Data.Functor.Identity.Identity>_R
                      <Main.Expr>_R)
                   @ b
                   s1
                   (\ (x :: Main.Expr)
                      (s' :: Text.Megaparsec.Prim.State [GHC.Types.Char])
                      (hs :: Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token [GHC.Types.Char])) ->
                    cok
                      x
                      s'
                      (Text.Megaparsec.Prim.refreshLastHint
                         @ (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                         hs
                         Main.expr_cl))
                   cerr
                   (\ (x :: Main.Expr)
                      (s' :: Text.Megaparsec.Prim.State [GHC.Types.Char])
                      (hs :: Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token [GHC.Types.Char])) ->
                    eok
                      x
                      s'
                      (Text.Megaparsec.Prim.refreshLastHint
                         @ (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                         hs
                         Main.expr_el))
                   (\ (err :: Text.Megaparsec.Error.ParseError
                                (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                                Text.Megaparsec.Error.Dec) ->
                    eerr
                      (case err of wild { Text.Megaparsec.Error.ParseError ds ds1 ds2 ds3 ->
                       Text.Megaparsec.Error.ParseError
                         @ (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                         @ Text.Megaparsec.Error.Dec
                         ds
                         ds1
                         Main.expr2
                         ds3 }))) -}
37b4a0fc9f1091bd40e294a838790cc8
  expr2 ::
    Data.Set.Base.Set
      (Text.Megaparsec.Error.ErrorItem
         (Text.Megaparsec.Prim.Token [GHC.Types.Char]))
  {- Unfolding: (case Main.expr_el of wild {
                   GHC.Base.Nothing
                   -> Data.Set.Base.Tip
                        @ (Text.Megaparsec.Error.ErrorItem
                             (Text.Megaparsec.Prim.Token [GHC.Types.Char]))
                   GHC.Base.Just x
                   -> case x of dt { DEFAULT ->
                      Data.Set.Base.Bin
                        @ (Text.Megaparsec.Error.ErrorItem
                             (Text.Megaparsec.Prim.Token [GHC.Types.Char]))
                        1#
                        dt
                        (Data.Set.Base.Tip
                           @ (Text.Megaparsec.Error.ErrorItem
                                (Text.Megaparsec.Prim.Token [GHC.Types.Char])))
                        (Data.Set.Base.Tip
                           @ (Text.Megaparsec.Error.ErrorItem
                                (Text.Megaparsec.Prim.Token [GHC.Types.Char]))) } }) -}
4cb48167253215ff66a9c3f58c52a7f1
  expr3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "est of "#) -}
9aca53258ddee88e8d658ca1bef9c270
  expr4 :: GHC.Types.Char
  {- HasNoCafRefs, Unfolding: (GHC.Types.C# 'r'#) -}
81940ce81e3dfbc64995b8a42211d638
  expr5 ::
    Text.Megaparsec.Prim.State [GHC.Types.Char]
    -> (Main.Expr
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token [GHC.Types.Char])
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b)
    -> (Main.Expr
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token [GHC.Types.Char])
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(C1(U))> -}
728ab0bb8f56d5277c03788cfaffae0e
  expr_cl ::
    GHC.Base.Maybe
      (Text.Megaparsec.Error.ErrorItem
         (Text.Megaparsec.Prim.Token [GHC.Types.Char]))
  {- Unfolding: (case Main.expr_l of wild {
                   []
                   -> GHC.Base.Nothing
                        @ (Text.Megaparsec.Error.ErrorItem
                             (Text.Megaparsec.Prim.Token [GHC.Types.Char]))
                   : a1 as
                   -> GHC.Base.Just
                        @ (Text.Megaparsec.Error.ErrorItem
                             (Text.Megaparsec.Prim.Token [GHC.Types.Char]))
                        (Text.Megaparsec.Error.Label
                           @ (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                           (Data.List.NonEmpty.:|
                              @ GHC.Types.Char
                              Main.expr4
                              (GHC.Base.++ @ GHC.Types.Char Main.expr3 wild))) }) -}
b5cd3f99a9b24ff4683f14725706cccc
  expr_el ::
    GHC.Base.Maybe
      (Text.Megaparsec.Error.ErrorItem
         (Text.Megaparsec.Prim.Token [GHC.Types.Char]))
  {- Unfolding: (case Main.expr_l of wild {
                   []
                   -> GHC.Base.Nothing
                        @ (Text.Megaparsec.Error.ErrorItem
                             (Text.Megaparsec.Prim.Token [GHC.Types.Char]))
                   : a1 as
                   -> GHC.Base.Just
                        @ (Text.Megaparsec.Error.ErrorItem
                             (Text.Megaparsec.Prim.Token [GHC.Types.Char]))
                        (Text.Megaparsec.Error.Label
                           @ (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                           (Data.List.NonEmpty.:| @ GHC.Types.Char a1 as)) }) -}
4aa15cd45000495dd40a692f26791240
  expr_l :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "expression"#) -}
0aa2745f0127975d0854ff6c431f4650
  expr_p ::
    Text.Megaparsec.Prim.ParsecT
      Text.Megaparsec.Error.Dec
      [GHC.Types.Char]
      Data.Functor.Identity.Identity
      Main.Expr
  {- Unfolding: (Text.Megaparsec.Expr.makeExprParser
                   @ Text.Megaparsec.Error.Dec
                   @ [GHC.Types.Char]
                   @ (Text.Megaparsec.Prim.ParsecT
                        Text.Megaparsec.Error.Dec
                        GHC.Base.String
                        Data.Functor.Identity.Identity)
                   @ Main.Expr
                   (Main.$s$fMonadParsecesParsecT @ Data.Functor.Identity.Identity)
                   Main.expr5
                     `cast`
                   (Sym (Text.Megaparsec.Prim.N:ParsecT[0]
                             <Text.Megaparsec.Error.Dec>_N
                             <[GHC.Types.Char]>_N
                             <Data.Functor.Identity.Identity>_R
                             <Main.Expr>_R))
                   Main.table) -}
0423e9e43597ae97b5724f0a3f792940
  lexeme ::
    Text.Megaparsec.String.Parser a -> Text.Megaparsec.String.Parser a
  {- Arity: 6,
     Strictness: <C(C(C(C(C(S))))),1*C1(C1(C1(C1(C1(U)))))><L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.lexeme1
                  `cast`
                (forall (a :: <*>_N).
                 <Text.Megaparsec.Prim.ParsecT
                    Text.Megaparsec.Error.Dec
                    GHC.Base.String
                    Data.Functor.Identity.Identity
                    a>_R
                 ->_R Sym (Text.Megaparsec.Prim.N:ParsecT[0]
                               <Text.Megaparsec.Error.Dec>_N
                               <[GHC.Types.Char]>_N
                               <Data.Functor.Identity.Identity>_R
                               <a>_R)) -}
024ade3484ab41f8b04bad4372693d98
  lexeme1 ::
    Text.Megaparsec.Prim.ParsecT
      Text.Megaparsec.Error.Dec
      GHC.Base.String
      Data.Functor.Identity.Identity
      a
    -> forall b1.
       Text.Megaparsec.Prim.State [GHC.Types.Char]
       -> (a
           -> Text.Megaparsec.Prim.State [GHC.Types.Char]
           -> Text.Megaparsec.Prim.Hints
                (Text.Megaparsec.Prim.Token [GHC.Types.Char])
           -> Data.Functor.Identity.Identity b1)
       -> (Text.Megaparsec.Error.ParseError
             (Text.Megaparsec.Prim.Token [GHC.Types.Char])
             Text.Megaparsec.Error.Dec
           -> Text.Megaparsec.Prim.State [GHC.Types.Char]
           -> Data.Functor.Identity.Identity b1)
       -> (a
           -> Text.Megaparsec.Prim.State [GHC.Types.Char]
           -> Text.Megaparsec.Prim.Hints
                (Text.Megaparsec.Prim.Token [GHC.Types.Char])
           -> Data.Functor.Identity.Identity b1)
       -> (Text.Megaparsec.Error.ParseError
             (Text.Megaparsec.Prim.Token [GHC.Types.Char])
             Text.Megaparsec.Error.Dec
           -> Text.Megaparsec.Prim.State [GHC.Types.Char]
           -> Data.Functor.Identity.Identity b1)
       -> Data.Functor.Identity.Identity b1
  {- Arity: 6,
     Strictness: <C(C(C(C(C(S))))),1*C1(C1(C1(C1(C1(U)))))><L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (6, True, False)
                (\ @ a
                   (eta3 :: Text.Megaparsec.Prim.ParsecT
                              Text.Megaparsec.Error.Dec
                              GHC.Base.String
                              Data.Functor.Identity.Identity
                              a)
                   @ b1
                   (w4 :: Text.Megaparsec.Prim.State [GHC.Types.Char])
                   (w5 :: a
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                          -> Data.Functor.Identity.Identity b1)
                   (w6 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            Text.Megaparsec.Error.Dec
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Data.Functor.Identity.Identity b1)
                   (w7 :: a
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                          -> Data.Functor.Identity.Identity b1)
                   (w8 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            Text.Megaparsec.Error.Dec
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Data.Functor.Identity.Identity b1) ->
                 Text.Megaparsec.Prim.$w$c<*
                   @ Text.Megaparsec.Error.Dec
                   @ [GHC.Types.Char]
                   @ Data.Functor.Identity.Identity
                   Text.Megaparsec.Prim.$fStream[]
                   @ a
                   @ ()
                   eta3
                   Main.sc
                   @ b1
                   w4
                   w5
                   w6
                   w7
                   w8) -}
3fb4acfdfc5c3633b3e46ac31be14b33
  lineComment :: Text.Megaparsec.String.Parser ()
  {- Unfolding: (Text.Megaparsec.Lexer.skipLineComment
                   @ Text.Megaparsec.Error.Dec
                   @ [GHC.Types.Char]
                   @ (Text.Megaparsec.Prim.ParsecT
                        Text.Megaparsec.Error.Dec
                        GHC.Base.String
                        Data.Functor.Identity.Identity)
                   (Main.$s$fMonadParsecesParsecT @ Data.Functor.Identity.Identity)
                   Main.lineComment2
                     `cast`
                   (Sym (Data.Type.Equality.N:~[0]
                             <*>_N) (Sym (Text.Megaparsec.Prim.D:R:Token[][0])) <GHC.Types.Char>_N)
                   Main.lineComment1) -}
1dffcb865f9c26b15b818b4cafe4ff0f
  lineComment1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "#"#) -}
fef4ab7f029b45e444be40b4473b3a5a
  lineComment2 :: GHC.Types.Char GHC.Types.~~ GHC.Types.Char
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Eq#
                   @ *
                   @ *
                   @ GHC.Types.Char
                   @ GHC.Types.Char
                   @~ <GHC.Types.Char>_N) -}
739fac1c07fa089bdc3c42a0cad03048
  main :: GHC.Types.IO ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
7db6cd8cfc6f1ed6808bf2e24ad53a97
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (# s, GHC.Tuple.() #)) -}
63225323fa4bdff760faeee1876da54f
  main2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
d5c7a7dc5036e7be730ca8be90b1935d
  name :: Text.Megaparsec.String.Parser GHC.Base.String
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Main.name1
                  `cast`
                (Sym (Text.Megaparsec.Prim.N:ParsecT[0]
                          <Text.Megaparsec.Error.Dec>_N
                          <[GHC.Types.Char]>_N
                          <Data.Functor.Identity.Identity>_R
                          <[GHC.Types.Char]>_R)) -}
e2fef1b2f184d192b9d18fca9fb6332f
  name1 ::
    Text.Megaparsec.Prim.State [GHC.Types.Char]
    -> ([GHC.Types.Char]
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token [GHC.Types.Char])
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b)
    -> ([GHC.Types.Char]
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token [GHC.Types.Char])
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ b
                   (s1 :: Text.Megaparsec.Prim.State [GHC.Types.Char])
                   (cok :: [GHC.Types.Char]
                           -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                           -> Text.Megaparsec.Prim.Hints
                                (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                           -> Data.Functor.Identity.Identity b)
                   (cerr :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                              Text.Megaparsec.Error.Dec
                            -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                            -> Data.Functor.Identity.Identity b)
                   (eok :: [GHC.Types.Char]
                           -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                           -> Text.Megaparsec.Prim.Hints
                                (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                           -> Data.Functor.Identity.Identity b)
                   (eerr :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                              Text.Megaparsec.Error.Dec
                            -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                            -> Data.Functor.Identity.Identity b) ->
                 Text.Megaparsec.Prim.$w$c<*
                   @ Text.Megaparsec.Error.Dec
                   @ [GHC.Types.Char]
                   @ Data.Functor.Identity.Identity
                   Text.Megaparsec.Prim.$fStream[]
                   @ [GHC.Types.Char]
                   @ ()
                   Main.name3
                     `cast`
                   (Sym (Text.Megaparsec.Prim.N:ParsecT[0]
                             <Text.Megaparsec.Error.Dec>_N
                             <[GHC.Types.Char]>_N
                             <Data.Functor.Identity.Identity>_R
                             <[GHC.Types.Char]>_R))
                   Main.sc
                   @ b
                   s1
                   (\ (x :: [GHC.Types.Char])
                      (s' :: Text.Megaparsec.Prim.State [GHC.Types.Char])[OneShot]
                      (hs :: Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token [GHC.Types.Char]))[OneShot] ->
                    cok
                      x
                      s'
                      (Text.Megaparsec.Prim.refreshLastHint
                         @ (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                         hs
                         Main.name_cl))
                   cerr
                   (\ (x :: [GHC.Types.Char])
                      (s' :: Text.Megaparsec.Prim.State [GHC.Types.Char])[OneShot]
                      (hs :: Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token [GHC.Types.Char]))[OneShot] ->
                    eok
                      x
                      s'
                      (Text.Megaparsec.Prim.refreshLastHint
                         @ (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                         hs
                         Main.name_el))
                   (\ (err :: Text.Megaparsec.Error.ParseError
                                (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                                Text.Megaparsec.Error.Dec) ->
                    eerr
                      (case err of wild { Text.Megaparsec.Error.ParseError ds ds1 ds2 ds3 ->
                       Text.Megaparsec.Error.ParseError
                         @ (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                         @ Text.Megaparsec.Error.Dec
                         ds
                         ds1
                         Main.name2
                         ds3 }))) -}
3839e2c82c373b1e46090a9d58faa035
  name2 ::
    Data.Set.Base.Set
      (Text.Megaparsec.Error.ErrorItem
         (Text.Megaparsec.Prim.Token [GHC.Types.Char]))
  {- Unfolding: (case Main.name_el of wild {
                   GHC.Base.Nothing
                   -> Data.Set.Base.Tip
                        @ (Text.Megaparsec.Error.ErrorItem
                             (Text.Megaparsec.Prim.Token [GHC.Types.Char]))
                   GHC.Base.Just x
                   -> case x of dt { DEFAULT ->
                      Data.Set.Base.Bin
                        @ (Text.Megaparsec.Error.ErrorItem
                             (Text.Megaparsec.Prim.Token [GHC.Types.Char]))
                        1#
                        dt
                        (Data.Set.Base.Tip
                           @ (Text.Megaparsec.Error.ErrorItem
                                (Text.Megaparsec.Prim.Token [GHC.Types.Char])))
                        (Data.Set.Base.Tip
                           @ (Text.Megaparsec.Error.ErrorItem
                                (Text.Megaparsec.Prim.Token [GHC.Types.Char]))) } }) -}
b650e1f9ef751562b8b8325a67bb8ed7
  name3 ::
    Text.Megaparsec.Prim.State [GHC.Types.Char]
    -> ([GHC.Types.Char]
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token [GHC.Types.Char])
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b1)
    -> ([GHC.Types.Char]
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token [GHC.Types.Char])
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <S(SSLL),1*U(U,U(U(U,U,U),U),U,U(U))><L,C(C1(C1(U)))><L,U><L,A><L,1*C1(C1(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ @ b1
                   (w :: Text.Megaparsec.Prim.State [GHC.Types.Char])
                   (w1 :: [GHC.Types.Char]
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                          -> Data.Functor.Identity.Identity b1)
                   (w2 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            Text.Megaparsec.Error.Dec
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Data.Functor.Identity.Identity b1)
                   (w3 :: [GHC.Types.Char]
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                          -> Data.Functor.Identity.Identity b1)
                   (w4 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            Text.Megaparsec.Error.Dec
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Data.Functor.Identity.Identity b1) ->
                 case w of ww { Text.Megaparsec.Prim.State ww1 ww2 ww3 ww4 ->
                 case ww2 of ww5 { Data.List.NonEmpty.:| ww6 ww7 ->
                 Main.$wp @ b1 ww1 ww6 ww7 ww3 ww4 w1 w2 w4 } }) -}
98a444b0e59aa554e610c8e83026a81b
  name4 ::
    Text.Megaparsec.Prim.State [GHC.Types.Char]
    -> (GHC.Types.Char
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token [GHC.Types.Char])
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b)
    -> (GHC.Types.Char
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token [GHC.Types.Char])
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <S(SSLL),1*U(U,U(U(U,U,U),U),U,U(U))><L,1*C1(C1(C1(U)))><L,A><L,A><L,1*C1(C1(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ @ b
                   (w :: Text.Megaparsec.Prim.State [GHC.Types.Char])
                   (w1 :: GHC.Types.Char
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                          -> Data.Functor.Identity.Identity b)
                   (w2 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            Text.Megaparsec.Error.Dec
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Data.Functor.Identity.Identity b)
                   (w3 :: GHC.Types.Char
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                          -> Data.Functor.Identity.Identity b)
                   (w4 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            Text.Megaparsec.Error.Dec
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Data.Functor.Identity.Identity b) ->
                 case w of ww { Text.Megaparsec.Prim.State ww1 ww2 ww3 ww4 ->
                 case ww2 of ww5 { Data.List.NonEmpty.:| ww6 ww7 ->
                 Main.$weta1 @ b ww1 ww6 ww7 ww3 ww4 w1 w4 } }) -}
24b4b7a572b9fcc01cc8e749d56f7ba3
  name5 ::
    Data.Set.Base.Set
      (Text.Megaparsec.Error.ErrorItem
         (Text.Megaparsec.Prim.Token [GHC.Types.Char]))
  {- Unfolding: (case Main.name_l1 of wild {
                   []
                   -> Data.Set.Base.Tip
                        @ (Text.Megaparsec.Error.ErrorItem
                             (Text.Megaparsec.Prim.Token [GHC.Types.Char]))
                   : a1 as
                   -> Data.Set.Base.Bin
                        @ (Text.Megaparsec.Error.ErrorItem
                             (Text.Megaparsec.Prim.Token [GHC.Types.Char]))
                        1#
                        (Text.Megaparsec.Error.Label
                           @ (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                           (Data.List.NonEmpty.:| @ GHC.Types.Char a1 as))
                        (Data.Set.Base.Tip
                           @ (Text.Megaparsec.Error.ErrorItem
                                (Text.Megaparsec.Prim.Token [GHC.Types.Char])))
                        (Data.Set.Base.Tip
                           @ (Text.Megaparsec.Error.ErrorItem
                                (Text.Megaparsec.Prim.Token [GHC.Types.Char]))) }) -}
3c875b3fec54185bda33351ca0d4233b
  name6 ::
    Data.Set.Base.Set
      (Text.Megaparsec.Error.ErrorItem
         (Text.Megaparsec.Prim.Token [GHC.Types.Char]))
  {- Unfolding: (case Main.name_l2 of wild {
                   []
                   -> Data.Set.Base.Tip
                        @ (Text.Megaparsec.Error.ErrorItem
                             (Text.Megaparsec.Prim.Token [GHC.Types.Char]))
                   : a1 as
                   -> Data.Set.Base.Bin
                        @ (Text.Megaparsec.Error.ErrorItem
                             (Text.Megaparsec.Prim.Token [GHC.Types.Char]))
                        1#
                        (Text.Megaparsec.Error.Label
                           @ (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                           (Data.List.NonEmpty.:| @ GHC.Types.Char a1 as))
                        (Data.Set.Base.Tip
                           @ (Text.Megaparsec.Error.ErrorItem
                                (Text.Megaparsec.Prim.Token [GHC.Types.Char])))
                        (Data.Set.Base.Tip
                           @ (Text.Megaparsec.Error.ErrorItem
                                (Text.Megaparsec.Prim.Token [GHC.Types.Char]))) }) -}
611e3c45406e0202914a69ad8ca3dcd7
  name_cl ::
    GHC.Base.Maybe
      (Text.Megaparsec.Error.ErrorItem
         (Text.Megaparsec.Prim.Token [GHC.Types.Char]))
  {- Unfolding: (case Main.name_l of wild {
                   []
                   -> GHC.Base.Nothing
                        @ (Text.Megaparsec.Error.ErrorItem
                             (Text.Megaparsec.Prim.Token [GHC.Types.Char]))
                   : a1 as
                   -> GHC.Base.Just
                        @ (Text.Megaparsec.Error.ErrorItem
                             (Text.Megaparsec.Prim.Token [GHC.Types.Char]))
                        (Text.Megaparsec.Error.Label
                           @ (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                           (Data.List.NonEmpty.:|
                              @ GHC.Types.Char
                              Main.expr4
                              (GHC.Base.++ @ GHC.Types.Char Main.expr3 wild))) }) -}
c32c478029e961df6413c391118cd28c
  name_el ::
    GHC.Base.Maybe
      (Text.Megaparsec.Error.ErrorItem
         (Text.Megaparsec.Prim.Token [GHC.Types.Char]))
  {- Unfolding: (case Main.name_l of wild {
                   []
                   -> GHC.Base.Nothing
                        @ (Text.Megaparsec.Error.ErrorItem
                             (Text.Megaparsec.Prim.Token [GHC.Types.Char]))
                   : a1 as
                   -> GHC.Base.Just
                        @ (Text.Megaparsec.Error.ErrorItem
                             (Text.Megaparsec.Prim.Token [GHC.Types.Char]))
                        (Text.Megaparsec.Error.Label
                           @ (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                           (Data.List.NonEmpty.:| @ GHC.Types.Char a1 as)) }) -}
9986bf7d1a4060f87038272b7d6b49ac
  name_l :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "name"#) -}
45ff25e602c1f010bd03df6fe857b70b
  name_l1 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   "alphanumeric character"#) -}
8f2ecb9f69e7dca6c0eede382d3aaa91
  name_l2 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "letter"#) -}
91ab1d601d72bb4cf7f7ed311c7bdb1f
  number :: Text.Megaparsec.String.Parser GHC.Types.Double
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.number1
                  `cast`
                (Sym (Text.Megaparsec.Prim.N:ParsecT[0]
                          <Text.Megaparsec.Error.Dec>_N
                          <[GHC.Types.Char]>_N
                          <Data.Functor.Identity.Identity>_R
                          <GHC.Types.Double>_R)) -}
6d6bcd74d9818b9e9bfb05febf8632ea
  number1 ::
    Text.Megaparsec.Prim.State [GHC.Types.Char]
    -> (GHC.Types.Double
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token [GHC.Types.Char])
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b1)
    -> (GHC.Types.Double
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token [GHC.Types.Char])
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ @ b1
                   (s1 :: Text.Megaparsec.Prim.State [GHC.Types.Char])
                   (cok :: GHC.Types.Double
                           -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                           -> Text.Megaparsec.Prim.Hints
                                (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                              Text.Megaparsec.Error.Dec
                            -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: GHC.Types.Double
                           -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                           -> Text.Megaparsec.Prim.Hints
                                (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                              Text.Megaparsec.Error.Dec
                            -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                            -> Data.Functor.Identity.Identity b1) ->
                 Text.Megaparsec.Prim.$w$c<*
                   @ Text.Megaparsec.Error.Dec
                   @ [GHC.Types.Char]
                   @ Data.Functor.Identity.Identity
                   Text.Megaparsec.Prim.$fStream[]
                   @ Data.Scientific.Scientific
                   @ ()
                   Main.number2
                   Main.sc
                   @ b1
                   s1
                   (\ (x :: Data.Scientific.Scientific) ->
                    cok
                      (case x of ww1 { Data.Scientific.Scientific ww2 ww3 ->
                       case Data.Scientific.$wtoBoundedRealFloat
                              @ GHC.Types.Double
                              GHC.Float.$fRealFloatDouble
                              ww2
                              ww3 of wild {
                         Data.Either.Left x1 -> x1 Data.Either.Right y -> y } }))
                   cerr
                   (\ (x :: Data.Scientific.Scientific) ->
                    eok
                      (case x of ww1 { Data.Scientific.Scientific ww2 ww3 ->
                       case Data.Scientific.$wtoBoundedRealFloat
                              @ GHC.Types.Double
                              GHC.Float.$fRealFloatDouble
                              ww2
                              ww3 of wild {
                         Data.Either.Left x1 -> x1 Data.Either.Right y -> y } }))
                   eerr) -}
aa51158353bc38c22d73b574c7e78993
  number2 ::
    Text.Megaparsec.Prim.ParsecT
      Text.Megaparsec.Error.Dec
      GHC.Base.String
      Data.Functor.Identity.Identity
      Data.Scientific.Scientific
  {- Unfolding: (Text.Megaparsec.Lexer.number
                   @ Text.Megaparsec.Error.Dec
                   @ [GHC.Types.Char]
                   @ (Text.Megaparsec.Prim.ParsecT
                        Text.Megaparsec.Error.Dec
                        GHC.Base.String
                        Data.Functor.Identity.Identity)
                   (Main.$s$fMonadParsecesParsecT @ Data.Functor.Identity.Identity)
                   Main.lineComment2
                     `cast`
                   (Sym (Data.Type.Equality.N:~[0]
                             <*>_N) (Sym (Text.Megaparsec.Prim.D:R:Token[][0])) <GHC.Types.Char>_N)) -}
bce32ea05e042170643f3c58e18e539d
  parens ::
    Text.Megaparsec.String.Parser a -> Text.Megaparsec.String.Parser a
  {- Arity: 6,
     Unfolding: (\ @ a ->
                 Main.$sbetween
                   @ [GHC.Types.Char]
                   @ [GHC.Types.Char]
                   @ a
                   Main.parens5
                     `cast`
                   (Sym (Text.Megaparsec.Prim.N:ParsecT[0]
                             <Text.Megaparsec.Error.Dec>_N
                             <[GHC.Types.Char]>_N
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Base.String>_R))
                   Main.parens1
                     `cast`
                   (Sym (Text.Megaparsec.Prim.N:ParsecT[0]
                             <Text.Megaparsec.Error.Dec>_N
                             <[GHC.Types.Char]>_N
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Base.String>_R))) -}
a96141fa14e5fae0804d4a73ec018d46
  parens1 ::
    Text.Megaparsec.Prim.State [GHC.Types.Char]
    -> (GHC.Base.String
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token [GHC.Types.Char])
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b1)
    -> (GHC.Base.String
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token [GHC.Types.Char])
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5, Unfolding: (Main.parens3 Main.parens2) -}
1826daef4f7ad36493d37fd19984e2d0
  parens2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ")"#) -}
2d32af84c618bc744063d34d06195b8d
  parens3 ::
    GHC.Base.String
    -> forall b1.
       Text.Megaparsec.Prim.State [GHC.Types.Char]
       -> (GHC.Base.String
           -> Text.Megaparsec.Prim.State [GHC.Types.Char]
           -> Text.Megaparsec.Prim.Hints
                (Text.Megaparsec.Prim.Token [GHC.Types.Char])
           -> Data.Functor.Identity.Identity b1)
       -> (Text.Megaparsec.Error.ParseError
             (Text.Megaparsec.Prim.Token [GHC.Types.Char])
             Text.Megaparsec.Error.Dec
           -> Text.Megaparsec.Prim.State [GHC.Types.Char]
           -> Data.Functor.Identity.Identity b1)
       -> (GHC.Base.String
           -> Text.Megaparsec.Prim.State [GHC.Types.Char]
           -> Text.Megaparsec.Prim.Hints
                (Text.Megaparsec.Prim.Token [GHC.Types.Char])
           -> Data.Functor.Identity.Identity b1)
       -> (Text.Megaparsec.Error.ParseError
             (Text.Megaparsec.Prim.Token [GHC.Types.Char])
             Text.Megaparsec.Error.Dec
           -> Text.Megaparsec.Prim.State [GHC.Types.Char]
           -> Data.Functor.Identity.Identity b1)
       -> Data.Functor.Identity.Identity b1
  {- Arity: 6,
     Strictness: <S,1*U><L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (6, True, False)
                (\ (x :: GHC.Base.String)
                   @ b1
                   (eta2 :: Text.Megaparsec.Prim.State [GHC.Types.Char])
                   (eta3 :: GHC.Base.String
                            -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                            -> Text.Megaparsec.Prim.Hints
                                 (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            -> Data.Functor.Identity.Identity b1)
                   (eta4 :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                              Text.Megaparsec.Error.Dec
                            -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                            -> Data.Functor.Identity.Identity b1)
                   (eta5 :: GHC.Base.String
                            -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                            -> Text.Megaparsec.Prim.Hints
                                 (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            -> Data.Functor.Identity.Identity b1)
                   (eta6 :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                              Text.Megaparsec.Error.Dec
                            -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                            -> Data.Functor.Identity.Identity b1) ->
                 Text.Megaparsec.Prim.$w$c<*
                   @ Text.Megaparsec.Error.Dec
                   @ [GHC.Types.Char]
                   @ Data.Functor.Identity.Identity
                   Text.Megaparsec.Prim.$fStream[]
                   @ GHC.Base.String
                   @ ()
                   (Main.parens4
                      x `cast` ([Sub (Sym (Text.Megaparsec.Prim.D:R:Token[][0]))])_R)
                     `cast`
                   (Sym (Text.Megaparsec.Prim.N:ParsecT[0]
                             <Text.Megaparsec.Error.Dec>_N
                             <[GHC.Types.Char]>_N
                             <Data.Functor.Identity.Identity>_R
                             ([Sub (Sym (Text.Megaparsec.Prim.D:R:Token[][0]))])_R))
                   Main.sc
                   @ b1
                   eta2
                   eta3
                   eta4
                   eta5
                   eta6) -}
14db27e04fa018fbf26558521347324d
  parens4 ::
    [Text.Megaparsec.Prim.Token [GHC.Types.Char]]
    -> forall b.
       Text.Megaparsec.Prim.State [GHC.Types.Char]
       -> ([Text.Megaparsec.Prim.Token [GHC.Types.Char]]
           -> Text.Megaparsec.Prim.State [GHC.Types.Char]
           -> Text.Megaparsec.Prim.Hints
                (Text.Megaparsec.Prim.Token [GHC.Types.Char])
           -> Data.Functor.Identity.Identity b)
       -> (Text.Megaparsec.Error.ParseError
             (Text.Megaparsec.Prim.Token [GHC.Types.Char])
             Text.Megaparsec.Error.Dec
           -> Text.Megaparsec.Prim.State [GHC.Types.Char]
           -> Data.Functor.Identity.Identity b)
       -> ([Text.Megaparsec.Prim.Token [GHC.Types.Char]]
           -> Text.Megaparsec.Prim.State [GHC.Types.Char]
           -> Text.Megaparsec.Prim.Hints
                (Text.Megaparsec.Prim.Token [GHC.Types.Char])
           -> Data.Functor.Identity.Identity b)
       -> (Text.Megaparsec.Error.ParseError
             (Text.Megaparsec.Prim.Token [GHC.Types.Char])
             Text.Megaparsec.Error.Dec
           -> Text.Megaparsec.Prim.State [GHC.Types.Char]
           -> Data.Functor.Identity.Identity b)
       -> Data.Functor.Identity.Identity b
  {- Arity: 6,
     Strictness: <S,1*U><L,U(U,U(U(U,U,U),U),U,U(U))><L,C(C1(C1(U)))><L,A><L,1*C1(C1(C1(U)))><L,C(C1(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ (w :: [Text.Megaparsec.Prim.Token [GHC.Types.Char]])
                   @ b
                   (w1 :: Text.Megaparsec.Prim.State [GHC.Types.Char])
                   (w2 :: [Text.Megaparsec.Prim.Token [GHC.Types.Char]]
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                          -> Data.Functor.Identity.Identity b)
                   (w3 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            Text.Megaparsec.Error.Dec
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Data.Functor.Identity.Identity b)
                   (w4 :: [Text.Megaparsec.Prim.Token [GHC.Types.Char]]
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                          -> Data.Functor.Identity.Identity b)
                   (w5 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            Text.Megaparsec.Error.Dec
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Data.Functor.Identity.Identity b) ->
                 Main.$wg w @ b w1 w2 w4 w5) -}
b06c8c653ba9879b71bb0e08b741e0b7
  parens5 ::
    Text.Megaparsec.Prim.State [GHC.Types.Char]
    -> (GHC.Base.String
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token [GHC.Types.Char])
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b1)
    -> (GHC.Base.String
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token [GHC.Types.Char])
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5, Unfolding: (Main.parens3 Main.parens6) -}
f9bd08ab0e001ae2b46f54bec9c815f1
  parens6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "("#) -}
7bef07720668abdbe60110fdc2012f8a
  prog :: Text.Megaparsec.String.Parser Main.Program
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.prog1
                  `cast`
                (Sym (Text.Megaparsec.Prim.N:ParsecT[0]
                          <Text.Megaparsec.Error.Dec>_N
                          <[GHC.Types.Char]>_N
                          <Data.Functor.Identity.Identity>_R
                          <[Main.Equation]>_R)) -}
c2ea98210cbea47a25ef69bff505b73b
  prog1 ::
    Text.Megaparsec.Prim.State [GHC.Types.Char]
    -> ([Main.Equation]
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token [GHC.Types.Char])
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b1)
    -> ([Main.Equation]
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token [GHC.Types.Char])
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ b1
                   (w4 :: Text.Megaparsec.Prim.State [GHC.Types.Char])
                   (w5 :: [Main.Equation]
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                          -> Data.Functor.Identity.Identity b1)
                   (w6 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            Text.Megaparsec.Error.Dec
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Data.Functor.Identity.Identity b1)
                   (w7 :: [Main.Equation]
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                          -> Data.Functor.Identity.Identity b1)
                   (w8 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            Text.Megaparsec.Error.Dec
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Data.Functor.Identity.Identity b1) ->
                 Text.Megaparsec.Prim.$w$c<*
                   @ Text.Megaparsec.Error.Dec
                   @ [GHC.Types.Char]
                   @ Data.Functor.Identity.Identity
                   Text.Megaparsec.Prim.$fStream[]
                   @ [Main.Equation]
                   @ ()
                   Main.prog3
                     `cast`
                   (Sym (Text.Megaparsec.Prim.N:ParsecT[0]
                             <Text.Megaparsec.Error.Dec>_N
                             <[GHC.Types.Char]>_N
                             <Data.Functor.Identity.Identity>_R
                             <[Main.Equation]>_R))
                   Main.prog2
                     `cast`
                   (Sym (Text.Megaparsec.Prim.N:ParsecT[0]
                             <Text.Megaparsec.Error.Dec>_N
                             <[GHC.Types.Char]>_N
                             <Data.Functor.Identity.Identity>_R
                             <()>_R))
                   @ b1
                   w4
                   w5
                   w6
                   w7
                   w8) -}
2f6d9d80e5cdcf5b57d2fc1ad3eb1b7b
  prog2 ::
    Text.Megaparsec.Prim.State [GHC.Types.Char]
    -> (()
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token [GHC.Types.Char])
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b)
    -> (()
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token [GHC.Types.Char])
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(SSLL),1*U(U,U(U(U,U,U),U),U,U)><L,A><L,A><L,1*C1(C1(C1(U)))><L,1*C1(C1(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ @ b
                   (w :: Text.Megaparsec.Prim.State [GHC.Types.Char])
                   (w1 :: ()
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                          -> Data.Functor.Identity.Identity b)
                   (w2 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            Text.Megaparsec.Error.Dec
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Data.Functor.Identity.Identity b)
                   (w3 :: ()
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                          -> Data.Functor.Identity.Identity b)
                   (w4 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            Text.Megaparsec.Error.Dec
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Data.Functor.Identity.Identity b) ->
                 case w of ww { Text.Megaparsec.Prim.State ww1 ww2 ww3 ww4 ->
                 case ww2 of ww5 { Data.List.NonEmpty.:| ww6 ww7 ->
                 Main.$wprog @ b ww1 ww6 ww7 ww3 ww4 w3 w4 } }) -}
51f20d8bd1aeee54301d1f41e797e495
  prog3 ::
    Text.Megaparsec.Prim.State [GHC.Types.Char]
    -> ([Main.Equation]
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token [GHC.Types.Char])
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b1)
    -> ([Main.Equation]
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token [GHC.Types.Char])
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ b1
                   (w4 :: Text.Megaparsec.Prim.State [GHC.Types.Char])
                   (w5 :: [Main.Equation]
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                          -> Data.Functor.Identity.Identity b1)
                   (w6 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            Text.Megaparsec.Error.Dec
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Data.Functor.Identity.Identity b1)
                   (w7 :: [Main.Equation]
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                          -> Data.Functor.Identity.Identity b1)
                   (w8 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            Text.Megaparsec.Error.Dec
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Data.Functor.Identity.Identity b1) ->
                 Text.Megaparsec.Prim.$w$c*>
                   @ Text.Megaparsec.Error.Dec
                   @ [GHC.Types.Char]
                   @ Data.Functor.Identity.Identity
                   Text.Megaparsec.Prim.$fStream[]
                   @ ()
                   @ [Main.Equation]
                   Main.scn
                   Main.prog4
                     `cast`
                   (Sym (Text.Megaparsec.Prim.N:ParsecT[0]
                             <Text.Megaparsec.Error.Dec>_N
                             <[GHC.Types.Char]>_N
                             <Data.Functor.Identity.Identity>_R
                             <[Main.Equation]>_R))
                   @ b1
                   w4
                   w5
                   w6
                   w7
                   w8) -}
59455c58bc597284fe3fad05cbc60ee7
  prog4 ::
    Text.Megaparsec.Prim.State [GHC.Types.Char]
    -> ([Main.Equation]
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token [GHC.Types.Char])
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b)
    -> ([Main.Equation]
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token [GHC.Types.Char])
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,U><L,A>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, True)
                (\ @ b
                   (w :: Text.Megaparsec.Prim.State [GHC.Types.Char])
                   (w1 :: [Main.Equation]
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                          -> Data.Functor.Identity.Identity b)
                   (w2 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            Text.Megaparsec.Error.Dec
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Data.Functor.Identity.Identity b)
                   (w3 :: [Main.Equation]
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                          -> Data.Functor.Identity.Identity b)
                   (w4 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            Text.Megaparsec.Error.Dec
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Data.Functor.Identity.Identity b) ->
                 Main.$wprog1 @ b w w1 w2 w3) -}
090a35459469b425f1e7f71c4b46b91b
  prog_eta ::
    Text.Megaparsec.Prim.ParsecT
      Text.Megaparsec.Error.Dec
      [GHC.Types.Char]
      Data.Functor.Identity.Identity
      [Main.Equation]
  {- Unfolding: (Text.Megaparsec.Combinator.sepEndBy1
                   @ (Text.Megaparsec.Prim.ParsecT
                        Text.Megaparsec.Error.Dec
                        GHC.Base.String
                        Data.Functor.Identity.Identity)
                   @ Main.Equation
                   @ ()
                   (Main.$s$fAlternativeParsecT @ Data.Functor.Identity.Identity)
                   Main.equation1
                     `cast`
                   (Sym (Text.Megaparsec.Prim.N:ParsecT[0]
                             <Text.Megaparsec.Error.Dec>_N
                             <[GHC.Types.Char]>_N
                             <Data.Functor.Identity.Identity>_R
                             <Main.Equation>_R))
                   Main.scn) -}
3e318ecf3bfd1477127fbdd7c6646c22
  rawData ::
    Text.Megaparsec.String.Parser
      (Main.RawData GHC.Types.Char Text.Megaparsec.Error.Dec)
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.rawData1
                  `cast`
                (Sym (Text.Megaparsec.Prim.N:ParsecT[0]
                          <Text.Megaparsec.Error.Dec>_N
                          <[GHC.Types.Char]>_N
                          <Data.Functor.Identity.Identity>_R
                          <[Data.Either.Either
                              (Text.Megaparsec.Error.ParseError
                                 GHC.Types.Char Text.Megaparsec.Error.Dec)
                              Main.Equation]>_R)) -}
63fe1993e6fcb0ab406fb5e4fef5da0d
  rawData1 ::
    Text.Megaparsec.Prim.State [GHC.Types.Char]
    -> ([Data.Either.Either
           (Text.Megaparsec.Error.ParseError
              GHC.Types.Char Text.Megaparsec.Error.Dec)
           Main.Equation]
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token [GHC.Types.Char])
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b1)
    -> ([Data.Either.Either
           (Text.Megaparsec.Error.ParseError
              GHC.Types.Char Text.Megaparsec.Error.Dec)
           Main.Equation]
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token [GHC.Types.Char])
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ b1
                   (w4 :: Text.Megaparsec.Prim.State [GHC.Types.Char])
                   (w5 :: [Data.Either.Either
                             (Text.Megaparsec.Error.ParseError
                                GHC.Types.Char Text.Megaparsec.Error.Dec)
                             Main.Equation]
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                          -> Data.Functor.Identity.Identity b1)
                   (w6 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            Text.Megaparsec.Error.Dec
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Data.Functor.Identity.Identity b1)
                   (w7 :: [Data.Either.Either
                             (Text.Megaparsec.Error.ParseError
                                GHC.Types.Char Text.Megaparsec.Error.Dec)
                             Main.Equation]
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                          -> Data.Functor.Identity.Identity b1)
                   (w8 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            Text.Megaparsec.Error.Dec
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Data.Functor.Identity.Identity b1) ->
                 Text.Megaparsec.Prim.$w$c<*
                   @ Text.Megaparsec.Error.Dec
                   @ [GHC.Types.Char]
                   @ Data.Functor.Identity.Identity
                   Text.Megaparsec.Prim.$fStream[]
                   @ [Data.Either.Either
                        (Text.Megaparsec.Error.ParseError
                           GHC.Types.Char Text.Megaparsec.Error.Dec)
                        Main.Equation]
                   @ ()
                   Main.rawData3
                     `cast`
                   (Sym (Text.Megaparsec.Prim.N:ParsecT[0]
                             <Text.Megaparsec.Error.Dec>_N
                             <[GHC.Types.Char]>_N
                             <Data.Functor.Identity.Identity>_R
                             <[Data.Either.Either
                                 (Text.Megaparsec.Error.ParseError
                                    GHC.Types.Char Text.Megaparsec.Error.Dec)
                                 Main.Equation]>_R))
                   Main.rawData2
                     `cast`
                   (Sym (Text.Megaparsec.Prim.N:ParsecT[0]
                             <Text.Megaparsec.Error.Dec>_N
                             <[GHC.Types.Char]>_N
                             <Data.Functor.Identity.Identity>_R
                             <()>_R))
                   @ b1
                   w4
                   w5
                   w6
                   w7
                   w8) -}
e8129db93858fdab003efe8b74c19420
  rawData2 ::
    Text.Megaparsec.Prim.State [GHC.Types.Char]
    -> (()
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token [GHC.Types.Char])
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b)
    -> (()
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token [GHC.Types.Char])
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(SSLL),1*U(U,U(U(U,U,U),U),U,U)><L,A><L,A><L,1*C1(C1(C1(U)))><L,1*C1(C1(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ @ b
                   (w :: Text.Megaparsec.Prim.State [GHC.Types.Char])
                   (w1 :: ()
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                          -> Data.Functor.Identity.Identity b)
                   (w2 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            Text.Megaparsec.Error.Dec
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Data.Functor.Identity.Identity b)
                   (w3 :: ()
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                          -> Data.Functor.Identity.Identity b)
                   (w4 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            Text.Megaparsec.Error.Dec
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Data.Functor.Identity.Identity b) ->
                 case w of ww { Text.Megaparsec.Prim.State ww1 ww2 ww3 ww4 ->
                 case ww2 of ww5 { Data.List.NonEmpty.:| ww6 ww7 ->
                 Main.$wrawData @ b ww1 ww6 ww7 ww3 ww4 w3 w4 } }) -}
8c3ebc146d8f523ab57bc0d283663522
  rawData3 ::
    Text.Megaparsec.Prim.State [GHC.Types.Char]
    -> ([Data.Either.Either
           (Text.Megaparsec.Error.ParseError
              GHC.Types.Char Text.Megaparsec.Error.Dec)
           Main.Equation]
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token [GHC.Types.Char])
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b1)
    -> ([Data.Either.Either
           (Text.Megaparsec.Error.ParseError
              GHC.Types.Char Text.Megaparsec.Error.Dec)
           Main.Equation]
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token [GHC.Types.Char])
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ b1
                   (w4 :: Text.Megaparsec.Prim.State [GHC.Types.Char])
                   (w5 :: [Data.Either.Either
                             (Text.Megaparsec.Error.ParseError
                                GHC.Types.Char Text.Megaparsec.Error.Dec)
                             Main.Equation]
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                          -> Data.Functor.Identity.Identity b1)
                   (w6 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            Text.Megaparsec.Error.Dec
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Data.Functor.Identity.Identity b1)
                   (w7 :: [Data.Either.Either
                             (Text.Megaparsec.Error.ParseError
                                GHC.Types.Char Text.Megaparsec.Error.Dec)
                             Main.Equation]
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                          -> Data.Functor.Identity.Identity b1)
                   (w8 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            Text.Megaparsec.Error.Dec
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Data.Functor.Identity.Identity b1) ->
                 Text.Megaparsec.Prim.$w$c*>
                   @ Text.Megaparsec.Error.Dec
                   @ [GHC.Types.Char]
                   @ Data.Functor.Identity.Identity
                   Text.Megaparsec.Prim.$fStream[]
                   @ ()
                   @ [Data.Either.Either
                        (Text.Megaparsec.Error.ParseError
                           GHC.Types.Char Text.Megaparsec.Error.Dec)
                        Main.Equation]
                   Main.scn
                   Main.rawData4
                     `cast`
                   (Sym (Text.Megaparsec.Prim.N:ParsecT[0]
                             <Text.Megaparsec.Error.Dec>_N
                             <[GHC.Types.Char]>_N
                             <Data.Functor.Identity.Identity>_R
                             <[Data.Either.Either
                                 (Text.Megaparsec.Error.ParseError
                                    GHC.Types.Char Text.Megaparsec.Error.Dec)
                                 Main.Equation]>_R))
                   @ b1
                   w4
                   w5
                   w6
                   w7
                   w8) -}
9450b26a32af670fb3e0981d87d830bc
  rawData4 ::
    Text.Megaparsec.Prim.State [GHC.Types.Char]
    -> ([Data.Either.Either
           (Text.Megaparsec.Error.ParseError
              GHC.Types.Char Text.Megaparsec.Error.Dec)
           Main.Equation]
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token [GHC.Types.Char])
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b)
    -> ([Data.Either.Either
           (Text.Megaparsec.Error.ParseError
              GHC.Types.Char Text.Megaparsec.Error.Dec)
           Main.Equation]
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token [GHC.Types.Char])
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,U><L,A>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, True)
                (\ @ b
                   (w :: Text.Megaparsec.Prim.State [GHC.Types.Char])
                   (w1 :: [Data.Either.Either
                             (Text.Megaparsec.Error.ParseError
                                GHC.Types.Char Text.Megaparsec.Error.Dec)
                             Main.Equation]
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                          -> Data.Functor.Identity.Identity b)
                   (w2 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            Text.Megaparsec.Error.Dec
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Data.Functor.Identity.Identity b)
                   (w3 :: [Data.Either.Either
                             (Text.Megaparsec.Error.ParseError
                                GHC.Types.Char Text.Megaparsec.Error.Dec)
                             Main.Equation]
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                          -> Data.Functor.Identity.Identity b)
                   (w4 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            Text.Megaparsec.Error.Dec
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Data.Functor.Identity.Identity b) ->
                 Main.$wrawData1 @ b w w1 w2 w3) -}
08e485cd21e8dc25abf92beb97e5b328
  rawData5 ::
    Text.Megaparsec.Prim.State [GHC.Types.Char]
    -> (Data.Either.Either
          (Text.Megaparsec.Error.ParseError
             GHC.Types.Char Text.Megaparsec.Error.Dec)
          Main.Equation
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token [GHC.Types.Char])
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b)
    -> (Data.Either.Either
          (Text.Megaparsec.Error.ParseError
             GHC.Types.Char Text.Megaparsec.Error.Dec)
          Main.Equation
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token [GHC.Types.Char])
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5 -}
5c249a3b2a7695f92b7c4e2fa8220422
  rawData_eta ::
    Text.Megaparsec.Prim.ParsecT
      Text.Megaparsec.Error.Dec
      [GHC.Types.Char]
      Data.Functor.Identity.Identity
      [Data.Either.Either
         (Text.Megaparsec.Error.ParseError
            GHC.Types.Char Text.Megaparsec.Error.Dec)
         Main.Equation]
  {- Unfolding: (Text.Megaparsec.Combinator.sepEndBy1
                   @ (Text.Megaparsec.Prim.ParsecT
                        Text.Megaparsec.Error.Dec
                        GHC.Base.String
                        Data.Functor.Identity.Identity)
                   @ (Data.Either.Either
                        (Text.Megaparsec.Error.ParseError
                           GHC.Types.Char Text.Megaparsec.Error.Dec)
                        Main.Equation)
                   @ ()
                   (Main.$s$fAlternativeParsecT @ Data.Functor.Identity.Identity)
                   Main.rawData5
                     `cast`
                   (Sym (Text.Megaparsec.Prim.N:ParsecT[0]
                             <Text.Megaparsec.Error.Dec>_N
                             <[GHC.Types.Char]>_N
                             <Data.Functor.Identity.Identity>_R
                             <Data.Either.Either
                                (Text.Megaparsec.Error.ParseError
                                   GHC.Types.Char Text.Megaparsec.Error.Dec)
                                Main.Equation>_R))
                   Main.scn) -}
cbac3a52b44fd12fa289a8e3c2973ba0
  sc :: Text.Megaparsec.String.Parser ()
  {- Unfolding: (Text.Megaparsec.Lexer.space
                   @ Text.Megaparsec.Error.Dec
                   @ [GHC.Types.Char]
                   @ (Text.Megaparsec.Prim.ParsecT
                        Text.Megaparsec.Error.Dec
                        GHC.Base.String
                        Data.Functor.Identity.Identity)
                   (Main.$s$fMonadParsecesParsecT @ Data.Functor.Identity.Identity)
                   Main.sc2
                     `cast`
                   (Sym (Text.Megaparsec.Prim.N:ParsecT[0]
                             <Text.Megaparsec.Error.Dec>_N
                             <[GHC.Types.Char]>_N
                             <Data.Functor.Identity.Identity>_R
                             <()>_R))
                   Main.lineComment
                   Main.sc1
                     `cast`
                   (Sym (Text.Megaparsec.Prim.N:ParsecT[0]
                             <Text.Megaparsec.Error.Dec>_N
                             <[GHC.Types.Char]>_N
                             <Data.Functor.Identity.Identity>_R
                             <()>_R))) -}
5ce136dc227b3bd63cff0188602874ad
  sc1 ::
    Text.Megaparsec.Prim.State [GHC.Types.Char]
    -> (()
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token [GHC.Types.Char])
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b)
    -> (()
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token [GHC.Types.Char])
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5, HasNoCafRefs,
     Unfolding: (\ @ b
                   (eta2 :: Text.Megaparsec.Prim.State [GHC.Types.Char])
                   (eta3 :: ()
                            -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                            -> Text.Megaparsec.Prim.Hints
                                 (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            -> Data.Functor.Identity.Identity b)
                   (eta4 :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                              Text.Megaparsec.Error.Dec
                            -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                            -> Data.Functor.Identity.Identity b)
                   (eta5 :: ()
                            -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                            -> Text.Megaparsec.Prim.Hints
                                 (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            -> Data.Functor.Identity.Identity b)
                   (eta6 :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                              Text.Megaparsec.Error.Dec
                            -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                            -> Data.Functor.Identity.Identity b) ->
                 case eta2 of wild { Text.Megaparsec.Prim.State ds3 pos dt ds4 ->
                 eta6
                   (Text.Megaparsec.Error.ParseError
                      @ (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                      @ Text.Megaparsec.Error.Dec
                      pos
                      (Data.Set.Base.Tip
                         @ (Text.Megaparsec.Error.ErrorItem
                              (Text.Megaparsec.Prim.Token [GHC.Types.Char])))
                      (Data.Set.Base.Tip
                         @ (Text.Megaparsec.Error.ErrorItem
                              (Text.Megaparsec.Prim.Token [GHC.Types.Char])))
                      (Data.Set.Base.Tip @ Text.Megaparsec.Error.Dec))
                   wild }) -}
c89808f8089d8928b4a44ffe4a268bf1
  sc2 ::
    Text.Megaparsec.Prim.State [GHC.Types.Char]
    -> (()
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token [GHC.Types.Char])
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b1)
    -> (()
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token [GHC.Types.Char])
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Unfolding: (\ @ b1
                   (eta2 :: Text.Megaparsec.Prim.State [GHC.Types.Char])
                   (eta3 :: ()
                            -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                            -> Text.Megaparsec.Prim.Hints
                                 (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            -> Data.Functor.Identity.Identity b1)
                   (eta4 :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                              Text.Megaparsec.Error.Dec
                            -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                            -> Data.Functor.Identity.Identity b1)
                   (eta5 :: ()
                            -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                            -> Text.Megaparsec.Prim.Hints
                                 (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            -> Data.Functor.Identity.Identity b1)
                   (eta6 :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                              Text.Megaparsec.Error.Dec
                            -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                            -> Data.Functor.Identity.Identity b1) ->
                 case eta2 of wild { Text.Megaparsec.Prim.State input ds2 dt w ->
                 case ds2 of wild1 { Data.List.NonEmpty.:| pos z ->
                 case input of wild2 {
                   []
                   -> eta6
                        (Text.Megaparsec.Error.ParseError
                           @ (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                           @ Text.Megaparsec.Error.Dec
                           wild1
                           Main.sc3
                           (Data.Set.Base.Tip
                              @ (Text.Megaparsec.Error.ErrorItem
                                   (Text.Megaparsec.Prim.Token [GHC.Types.Char])))
                           (Data.Set.Base.Tip @ Text.Megaparsec.Error.Dec))
                        wild
                   : t ts
                   -> case GHC.List.elem
                             @ GHC.Types.Char
                             GHC.Classes.$fEqChar
                             t
                             Main.sc_eta of wild3 {
                        GHC.Types.False
                        -> case pos of ww { Text.Megaparsec.Pos.SourcePos ww1 ww2 ww3 ->
                           eta6
                             (Text.Megaparsec.Error.ParseError
                                @ (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                                @ Text.Megaparsec.Error.Dec
                                wild1
                                (Data.Set.Base.Bin
                                   @ (Text.Megaparsec.Error.ErrorItem GHC.Types.Char)
                                   1#
                                   (Text.Megaparsec.Error.Tokens
                                      @ GHC.Types.Char
                                      (Data.List.NonEmpty.:|
                                         @ GHC.Types.Char
                                         t
                                         (GHC.Types.[] @ GHC.Types.Char)))
                                   (Data.Set.Base.Tip
                                      @ (Text.Megaparsec.Error.ErrorItem GHC.Types.Char))
                                   (Data.Set.Base.Tip
                                      @ (Text.Megaparsec.Error.ErrorItem GHC.Types.Char)))
                                  `cast`
                                (Data.Set.Base.Set
                                   (Text.Megaparsec.Error.ErrorItem
                                      (Sym (Text.Megaparsec.Prim.D:R:Token[][0])))_N)_R
                                (Data.Set.Base.Tip
                                   @ (Text.Megaparsec.Error.ErrorItem
                                        (Text.Megaparsec.Prim.Token [GHC.Types.Char])))
                                (Data.Set.Base.Tip @ Text.Megaparsec.Error.Dec))
                             wild }
                        GHC.Types.True
                        -> case pos of ww { Text.Megaparsec.Pos.SourcePos ww1 ww2 ww3 ->
                           case t of wild4 { GHC.Types.C# ds ->
                           case case ds of ds1 {
                                  DEFAULT
                                  -> Text.Megaparsec.Pos.SourcePos
                                       ww1
                                       ww2
                                       (GHC.Prim.plusWord# ww3 1##)
                                  '\t'#
                                  -> case w `cast`
                                          (Text.Megaparsec.Pos.N:Pos[0]) of wild5 { GHC.Types.W# y# ->
                                     case y# of wild6 {
                                       DEFAULT
                                       -> case GHC.Prim.remWord#
                                                 (GHC.Prim.minusWord# ww3 1##)
                                                 wild6 of wild7 { DEFAULT ->
                                          let {
                                            x :: GHC.Prim.Word#
                                            = GHC.Prim.minusWord#
                                                (GHC.Prim.plusWord# ww3 wild6)
                                                wild7
                                          } in
                                          case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.ltWord# x 1##) of wild8 {
                                            GHC.Types.False
                                            -> Text.Megaparsec.Pos.SourcePos ww1 ww2 x
                                            GHC.Types.True
                                            -> case Text.Megaparsec.Pos.$fArbitraryPos2
                                               ret_ty Text.Megaparsec.Pos.SourcePos
                                               of {} } }
                                       0##
                                       -> case GHC.Real.divZeroError
                                          ret_ty Text.Megaparsec.Pos.SourcePos
                                          of {} } }
                                  '\n'#
                                  -> Text.Megaparsec.Pos.SourcePos
                                       ww1
                                       (GHC.Prim.plusWord# ww2 1##)
                                       1## } of npos1 { Text.Megaparsec.Pos.SourcePos ipv ipv1 ipv2 ->
                           eta3
                             GHC.Tuple.()
                             (Text.Megaparsec.Prim.State
                                @ [GHC.Types.Char]
                                ts
                                (Data.List.NonEmpty.:| @ Text.Megaparsec.Pos.SourcePos npos1 z)
                                (GHC.Prim.plusWord# dt 1##)
                                w)
                             (GHC.Types.[]
                                @ (Data.Set.Base.Set
                                     (Text.Megaparsec.Error.ErrorItem
                                        (Text.Megaparsec.Prim.Token [GHC.Types.Char]))))
                               `cast`
                             (Sym (Text.Megaparsec.Prim.N:Hints[0]
                                       <Text.Megaparsec.Prim.Token
                                          [GHC.Types.Char]>_N)) } } } } } } }) -}
a197243381123c2407dbc64e9e1fc182
  sc3 ::
    Data.Set.Base.Set
      (Text.Megaparsec.Error.ErrorItem
         (Text.Megaparsec.Prim.Token [GHC.Types.Char]))
  {- HasNoCafRefs,
     Unfolding: (Data.Set.Base.Bin
                   @ (Text.Megaparsec.Error.ErrorItem
                        (Text.Megaparsec.Prim.Token [GHC.Types.Char]))
                   1#
                   (Text.Megaparsec.Error.EndOfInput
                      @ (Text.Megaparsec.Prim.Token [GHC.Types.Char]))
                   (Data.Set.Base.Tip
                      @ (Text.Megaparsec.Error.ErrorItem
                           (Text.Megaparsec.Prim.Token [GHC.Types.Char])))
                   (Data.Set.Base.Tip
                      @ (Text.Megaparsec.Error.ErrorItem
                           (Text.Megaparsec.Prim.Token [GHC.Types.Char])))) -}
410d2de018fcee0617c11828491687b7
  sc_eta :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# " \t"#) -}
c4ba52203c0470f5f4980a5b5a56e813
  scn :: Text.Megaparsec.String.Parser ()
  {- Unfolding: (Text.Megaparsec.Lexer.space
                   @ Text.Megaparsec.Error.Dec
                   @ [GHC.Types.Char]
                   @ (Text.Megaparsec.Prim.ParsecT
                        Text.Megaparsec.Error.Dec
                        GHC.Base.String
                        Data.Functor.Identity.Identity)
                   (Main.$s$fMonadParsecesParsecT @ Data.Functor.Identity.Identity)
                   Main.scn1
                     `cast`
                   (Sym (Text.Megaparsec.Prim.N:ParsecT[0]
                             <Text.Megaparsec.Error.Dec>_N
                             <[GHC.Types.Char]>_N
                             <Data.Functor.Identity.Identity>_R
                             <()>_R))
                   Main.lineComment
                   Main.sc1
                     `cast`
                   (Sym (Text.Megaparsec.Prim.N:ParsecT[0]
                             <Text.Megaparsec.Error.Dec>_N
                             <[GHC.Types.Char]>_N
                             <Data.Functor.Identity.Identity>_R
                             <()>_R))) -}
2e9d660012e28aef7053e6b5e188fec5
  scn1 ::
    Text.Megaparsec.Prim.State [GHC.Types.Char]
    -> (()
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token [GHC.Types.Char])
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b1)
    -> (()
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token [GHC.Types.Char])
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Unfolding: (\ @ b1
                   (eta2 :: Text.Megaparsec.Prim.State [GHC.Types.Char])
                   (eta3 :: ()
                            -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                            -> Text.Megaparsec.Prim.Hints
                                 (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            -> Data.Functor.Identity.Identity b1)
                   (eta4 :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                              Text.Megaparsec.Error.Dec
                            -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                            -> Data.Functor.Identity.Identity b1)
                   (eta5 :: ()
                            -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                            -> Text.Megaparsec.Prim.Hints
                                 (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            -> Data.Functor.Identity.Identity b1)
                   (eta6 :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                              Text.Megaparsec.Error.Dec
                            -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                            -> Data.Functor.Identity.Identity b1) ->
                 case eta2 of wild { Text.Megaparsec.Prim.State input ds2 dt w ->
                 case ds2 of wild1 { Data.List.NonEmpty.:| pos z ->
                 case input of wild2 {
                   []
                   -> eta6
                        (Text.Megaparsec.Error.ParseError
                           @ (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                           @ Text.Megaparsec.Error.Dec
                           wild1
                           Main.sc3
                           Main.scn2
                           (Data.Set.Base.Tip @ Text.Megaparsec.Error.Dec))
                        wild
                   : t ts
                   -> case t of ww { GHC.Types.C# ww1 ->
                      let {
                        x :: GHC.Prim.Word# = GHC.Prim.int2Word# (GHC.Prim.ord# ww1)
                      } in
                      let {
                        $j :: GHC.Prim.Void# -> Data.Functor.Identity.Identity b1
                          {- Arity: 1, Strictness: <L,A> -}
                        = \ (w1 :: GHC.Prim.Void#)[OneShot] ->
                          case pos of ww2 { Text.Megaparsec.Pos.SourcePos ww3 ww4 ww5 ->
                          case case ww1 of ds1 {
                                 DEFAULT
                                 -> Text.Megaparsec.Pos.SourcePos
                                      ww3
                                      ww4
                                      (GHC.Prim.plusWord# ww5 1##)
                                 '\t'#
                                 -> case w `cast`
                                         (Text.Megaparsec.Pos.N:Pos[0]) of wild3 { GHC.Types.W# y# ->
                                    case y# of wild4 {
                                      DEFAULT
                                      -> case GHC.Prim.remWord#
                                                (GHC.Prim.minusWord# ww5 1##)
                                                wild4 of wild5 { DEFAULT ->
                                         let {
                                           x1 :: GHC.Prim.Word#
                                           = GHC.Prim.minusWord#
                                               (GHC.Prim.plusWord# ww5 wild4)
                                               wild5
                                         } in
                                         case GHC.Prim.tagToEnum#
                                                @ GHC.Types.Bool
                                                (GHC.Prim.ltWord# x1 1##) of wild6 {
                                           GHC.Types.False
                                           -> Text.Megaparsec.Pos.SourcePos ww3 ww4 x1
                                           GHC.Types.True
                                           -> case Text.Megaparsec.Pos.$fArbitraryPos2
                                              ret_ty Text.Megaparsec.Pos.SourcePos
                                              of {} } }
                                      0##
                                      -> case GHC.Real.divZeroError
                                         ret_ty Text.Megaparsec.Pos.SourcePos
                                         of {} } }
                                 '\n'#
                                 -> Text.Megaparsec.Pos.SourcePos
                                      ww3
                                      (GHC.Prim.plusWord# ww4 1##)
                                      1## } of npos1 { Text.Megaparsec.Pos.SourcePos ipv ipv1 ipv2 ->
                          eta3
                            GHC.Tuple.()
                            (Text.Megaparsec.Prim.State
                               @ [GHC.Types.Char]
                               ts
                               (Data.List.NonEmpty.:| @ Text.Megaparsec.Pos.SourcePos npos1 z)
                               (GHC.Prim.plusWord# dt 1##)
                               w)
                            (GHC.Types.[]
                               @ (Data.Set.Base.Set
                                    (Text.Megaparsec.Error.ErrorItem
                                       (Text.Megaparsec.Prim.Token [GHC.Types.Char]))))
                              `cast`
                            (Sym (Text.Megaparsec.Prim.N:Hints[0]
                                      <Text.Megaparsec.Prim.Token [GHC.Types.Char]>_N)) } }
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.leWord# x 887##) of wild3 {
                        GHC.Types.False
                        -> case {__pkg_ccall base-4.9.1.0 u_iswspace GHC.Prim.Int#
                                                                     -> GHC.Prim.State#
                                                                          GHC.Prim.RealWorld
                                                                     -> (# GHC.Prim.State#
                                                                             GHC.Prim.RealWorld,
                                                                           GHC.Prim.Int# #)}
                                  (GHC.Prim.ord# ww1)
                                  GHC.Prim.realWorld# of wild4 { (#,#) ds ds1 ->
                           case ds1 of wild5 {
                             DEFAULT -> $j GHC.Prim.void#
                             0#
                             -> case pos of ww2 { Text.Megaparsec.Pos.SourcePos ww3 ww4 ww5 ->
                                eta6
                                  (Text.Megaparsec.Error.ParseError
                                     @ (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                                     @ Text.Megaparsec.Error.Dec
                                     wild1
                                     (Data.Set.Base.Bin
                                        @ (Text.Megaparsec.Error.ErrorItem GHC.Types.Char)
                                        1#
                                        (Text.Megaparsec.Error.Tokens
                                           @ GHC.Types.Char
                                           (Data.List.NonEmpty.:|
                                              @ GHC.Types.Char
                                              ww
                                              (GHC.Types.[] @ GHC.Types.Char)))
                                        (Data.Set.Base.Tip
                                           @ (Text.Megaparsec.Error.ErrorItem GHC.Types.Char))
                                        (Data.Set.Base.Tip
                                           @ (Text.Megaparsec.Error.ErrorItem GHC.Types.Char)))
                                       `cast`
                                     (Data.Set.Base.Set
                                        (Text.Megaparsec.Error.ErrorItem
                                           (Sym (Text.Megaparsec.Prim.D:R:Token[][0])))_N)_R
                                     Main.scn2
                                     (Data.Set.Base.Tip @ Text.Megaparsec.Error.Dec))
                                  wild } } }
                        GHC.Types.True
                        -> case x of wild4 {
                             DEFAULT
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.leWord#
                                          (GHC.Prim.minusWord# wild4 9##)
                                          4##) of wild5 {
                                  GHC.Types.False
                                  -> case wild4 of wild6 {
                                       DEFAULT
                                       -> case pos of ww2 { Text.Megaparsec.Pos.SourcePos ww3 ww4 ww5 ->
                                          eta6
                                            (Text.Megaparsec.Error.ParseError
                                               @ (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                                               @ Text.Megaparsec.Error.Dec
                                               wild1
                                               (Data.Set.Base.Bin
                                                  @ (Text.Megaparsec.Error.ErrorItem GHC.Types.Char)
                                                  1#
                                                  (Text.Megaparsec.Error.Tokens
                                                     @ GHC.Types.Char
                                                     (Data.List.NonEmpty.:|
                                                        @ GHC.Types.Char
                                                        ww
                                                        (GHC.Types.[] @ GHC.Types.Char)))
                                                  (Data.Set.Base.Tip
                                                     @ (Text.Megaparsec.Error.ErrorItem
                                                          GHC.Types.Char))
                                                  (Data.Set.Base.Tip
                                                     @ (Text.Megaparsec.Error.ErrorItem
                                                          GHC.Types.Char)))
                                                 `cast`
                                               (Data.Set.Base.Set
                                                  (Text.Megaparsec.Error.ErrorItem
                                                     (Sym (Text.Megaparsec.Prim.D:R:Token[][0])))_N)_R
                                               Main.scn2
                                               (Data.Set.Base.Tip @ Text.Megaparsec.Error.Dec))
                                            wild }
                                       160## -> $j GHC.Prim.void# }
                                  GHC.Types.True -> $j GHC.Prim.void# }
                             32## -> $j GHC.Prim.void# } } } } } }) -}
b680228c7e7730397d6e54f1f849da44
  scn2 ::
    Data.Set.Base.Set
      (Text.Megaparsec.Error.ErrorItem
         (Text.Megaparsec.Prim.Token [GHC.Types.Char]))
  {- Unfolding: (case Main.scn_l of wild {
                   []
                   -> Data.Set.Base.Tip
                        @ (Text.Megaparsec.Error.ErrorItem
                             (Text.Megaparsec.Prim.Token [GHC.Types.Char]))
                   : a1 as
                   -> Data.Set.Base.Bin
                        @ (Text.Megaparsec.Error.ErrorItem
                             (Text.Megaparsec.Prim.Token [GHC.Types.Char]))
                        1#
                        (Text.Megaparsec.Error.Label
                           @ (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                           (Data.List.NonEmpty.:| @ GHC.Types.Char a1 as))
                        (Data.Set.Base.Tip
                           @ (Text.Megaparsec.Error.ErrorItem
                                (Text.Megaparsec.Prim.Token [GHC.Types.Char])))
                        (Data.Set.Base.Tip
                           @ (Text.Megaparsec.Error.ErrorItem
                                (Text.Megaparsec.Prim.Token [GHC.Types.Char]))) }) -}
380de63bb1aefa208e5c8257f84786ab
  scn_l :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "white space"#) -}
3ee3d7e1f8f0f67955c888bc4226f037
  symbol ::
    GHC.Base.String -> Text.Megaparsec.String.Parser GHC.Base.String
  {- Arity: 6,
     Strictness: <S,1*U><L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.parens3
                  `cast`
                (<GHC.Base.String>_R
                 ->_R Sym (Text.Megaparsec.Prim.N:ParsecT[0]
                               <Text.Megaparsec.Error.Dec>_N
                               <[GHC.Types.Char]>_N
                               <Data.Functor.Identity.Identity>_R
                               <GHC.Base.String>_R)) -}
37611b2c4a5b7dca4823c8391ff1b06d
  table ::
    [[Text.Megaparsec.Expr.Operator
        Text.Megaparsec.String.Parser Main.Expr]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [Text.Megaparsec.Expr.Operator
                        Text.Megaparsec.String.Parser Main.Expr]
                   Main.table23
                   Main.table1) -}
4e926e5fa0e1a772cef20198efcf1473
  table1 ::
    [[Text.Megaparsec.Expr.Operator
        Text.Megaparsec.String.Parser Main.Expr]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [Text.Megaparsec.Expr.Operator
                        Text.Megaparsec.String.Parser Main.Expr]
                   Main.table13
                   Main.table2) -}
7d1c2ad00b2bf9b0310aa08fbe022e84
  table10 ::
    Text.Megaparsec.Prim.State [GHC.Types.Char]
    -> ((Main.Expr -> Main.Expr -> Main.Expr)
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token [GHC.Types.Char])
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b1)
    -> ((Main.Expr -> Main.Expr -> Main.Expr)
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token [GHC.Types.Char])
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ @ b1
                   (eta2 :: Text.Megaparsec.Prim.State [GHC.Types.Char])
                   (eta3 :: (Main.Expr -> Main.Expr -> Main.Expr)
                            -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                            -> Text.Megaparsec.Prim.Hints
                                 (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            -> Data.Functor.Identity.Identity b1)
                   (eta4 :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                              Text.Megaparsec.Error.Dec
                            -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                            -> Data.Functor.Identity.Identity b1)
                   (eta5 :: (Main.Expr -> Main.Expr -> Main.Expr)
                            -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                            -> Text.Megaparsec.Prim.Hints
                                 (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            -> Data.Functor.Identity.Identity b1)
                   (eta6 :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                              Text.Megaparsec.Error.Dec
                            -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                            -> Data.Functor.Identity.Identity b1) ->
                 let {
                   lvl40 :: Text.Megaparsec.Prim.State [GHC.Types.Char]
                            -> Text.Megaparsec.Prim.Hints
                                 (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            -> Data.Functor.Identity.Identity b1
                   = eta5 Main.Sum
                 } in
                 let {
                   lvl41 :: Text.Megaparsec.Prim.State [GHC.Types.Char]
                            -> Text.Megaparsec.Prim.Hints
                                 (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            -> Data.Functor.Identity.Identity b1
                   = eta3 Main.Sum
                 } in
                 Text.Megaparsec.Prim.$w$c<*
                   @ Text.Megaparsec.Error.Dec
                   @ [GHC.Types.Char]
                   @ Data.Functor.Identity.Identity
                   Text.Megaparsec.Prim.$fStream[]
                   @ GHC.Base.String
                   @ ()
                   Main.table11
                     `cast`
                   (Sym (Text.Megaparsec.Prim.N:ParsecT[0]
                             <Text.Megaparsec.Error.Dec>_N
                             <[GHC.Types.Char]>_N
                             <Data.Functor.Identity.Identity>_R
                             ([Sub (Sym (Text.Megaparsec.Prim.D:R:Token[][0]))])_R))
                   Main.sc
                   @ b1
                   eta2
                   (\ (x :: GHC.Base.String) -> lvl41)
                   eta4
                   (\ (x :: GHC.Base.String) -> lvl40)
                   eta6) -}
d11ca1704d9af05f47cebbab3db3a51b
  table11 ::
    Text.Megaparsec.Prim.State [GHC.Types.Char]
    -> ([Text.Megaparsec.Prim.Token [GHC.Types.Char]]
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token [GHC.Types.Char])
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b)
    -> ([Text.Megaparsec.Prim.Token [GHC.Types.Char]]
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token [GHC.Types.Char])
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Unfolding: (\ @ b
                   (w :: Text.Megaparsec.Prim.State [GHC.Types.Char])[OneShot]
                   (w1 :: [Text.Megaparsec.Prim.Token [GHC.Types.Char]]
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                          -> Data.Functor.Identity.Identity b)[OneShot]
                   (w2 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            Text.Megaparsec.Error.Dec
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Data.Functor.Identity.Identity b)[OneShot]
                   (w3 :: [Text.Megaparsec.Prim.Token [GHC.Types.Char]]
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                          -> Data.Functor.Identity.Identity b)[OneShot]
                   (w4 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            Text.Megaparsec.Error.Dec
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Data.Functor.Identity.Identity b)[OneShot] ->
                 Main.$wg
                   Main.table12
                     `cast`
                   ([Sub (Sym (Text.Megaparsec.Prim.D:R:Token[][0]))])_R
                   @ b
                   w
                   w1
                   w3
                   w4) -}
e489387b79ee2a075a9c099105822c29
  table12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "+"#) -}
1ab87b129f0cbbccf485e263bda2d02d
  table13 ::
    [Text.Megaparsec.Expr.Operator
       Text.Megaparsec.String.Parser Main.Expr]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Text.Megaparsec.Expr.Operator
                        Text.Megaparsec.String.Parser Main.Expr)
                   Main.table19
                   Main.table14) -}
36220af53e3139497e2b88aecaa90323
  table14 ::
    [Text.Megaparsec.Expr.Operator
       Text.Megaparsec.String.Parser Main.Expr]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Text.Megaparsec.Expr.Operator
                        Text.Megaparsec.String.Parser Main.Expr)
                   Main.table15
                   (GHC.Types.[]
                      @ (Text.Megaparsec.Expr.Operator
                           Text.Megaparsec.String.Parser Main.Expr))) -}
cd11f33f23a27300da0da1f11b4acad8
  table15 ::
    Text.Megaparsec.Expr.Operator
      (Text.Megaparsec.Prim.ParsecT
         Text.Megaparsec.Error.Dec
         GHC.Base.String
         Data.Functor.Identity.Identity)
      Main.Expr
  {- Strictness: m2,
     Unfolding: (Text.Megaparsec.Expr.InfixL
                   @ (Text.Megaparsec.Prim.ParsecT
                        Text.Megaparsec.Error.Dec
                        GHC.Base.String
                        Data.Functor.Identity.Identity)
                   @ Main.Expr
                   Main.table16
                     `cast`
                   (Sym (Text.Megaparsec.Prim.N:ParsecT[0]
                             <Text.Megaparsec.Error.Dec>_N
                             <[GHC.Types.Char]>_N
                             <Data.Functor.Identity.Identity>_R
                             <Main.Expr -> Main.Expr -> Main.Expr>_R))) -}
864faefefd74d9648b6921cc877d7103
  table16 ::
    Text.Megaparsec.Prim.State [GHC.Types.Char]
    -> ((Main.Expr -> Main.Expr -> Main.Expr)
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token [GHC.Types.Char])
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b1)
    -> ((Main.Expr -> Main.Expr -> Main.Expr)
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token [GHC.Types.Char])
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ @ b1
                   (eta2 :: Text.Megaparsec.Prim.State [GHC.Types.Char])
                   (eta3 :: (Main.Expr -> Main.Expr -> Main.Expr)
                            -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                            -> Text.Megaparsec.Prim.Hints
                                 (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            -> Data.Functor.Identity.Identity b1)
                   (eta4 :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                              Text.Megaparsec.Error.Dec
                            -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                            -> Data.Functor.Identity.Identity b1)
                   (eta5 :: (Main.Expr -> Main.Expr -> Main.Expr)
                            -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                            -> Text.Megaparsec.Prim.Hints
                                 (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            -> Data.Functor.Identity.Identity b1)
                   (eta6 :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                              Text.Megaparsec.Error.Dec
                            -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                            -> Data.Functor.Identity.Identity b1) ->
                 let {
                   lvl40 :: Text.Megaparsec.Prim.State [GHC.Types.Char]
                            -> Text.Megaparsec.Prim.Hints
                                 (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            -> Data.Functor.Identity.Identity b1
                   = eta5 Main.Subtraction
                 } in
                 let {
                   lvl41 :: Text.Megaparsec.Prim.State [GHC.Types.Char]
                            -> Text.Megaparsec.Prim.Hints
                                 (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            -> Data.Functor.Identity.Identity b1
                   = eta3 Main.Subtraction
                 } in
                 Text.Megaparsec.Prim.$w$c<*
                   @ Text.Megaparsec.Error.Dec
                   @ [GHC.Types.Char]
                   @ Data.Functor.Identity.Identity
                   Text.Megaparsec.Prim.$fStream[]
                   @ GHC.Base.String
                   @ ()
                   Main.table17
                     `cast`
                   (Sym (Text.Megaparsec.Prim.N:ParsecT[0]
                             <Text.Megaparsec.Error.Dec>_N
                             <[GHC.Types.Char]>_N
                             <Data.Functor.Identity.Identity>_R
                             ([Sub (Sym (Text.Megaparsec.Prim.D:R:Token[][0]))])_R))
                   Main.sc
                   @ b1
                   eta2
                   (\ (x :: GHC.Base.String) -> lvl41)
                   eta4
                   (\ (x :: GHC.Base.String) -> lvl40)
                   eta6) -}
d956e449732d130d452d6ee3eb87c8d6
  table17 ::
    Text.Megaparsec.Prim.State [GHC.Types.Char]
    -> ([Text.Megaparsec.Prim.Token [GHC.Types.Char]]
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token [GHC.Types.Char])
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b)
    -> ([Text.Megaparsec.Prim.Token [GHC.Types.Char]]
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token [GHC.Types.Char])
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Unfolding: (\ @ b
                   (w :: Text.Megaparsec.Prim.State [GHC.Types.Char])[OneShot]
                   (w1 :: [Text.Megaparsec.Prim.Token [GHC.Types.Char]]
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                          -> Data.Functor.Identity.Identity b)[OneShot]
                   (w2 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            Text.Megaparsec.Error.Dec
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Data.Functor.Identity.Identity b)[OneShot]
                   (w3 :: [Text.Megaparsec.Prim.Token [GHC.Types.Char]]
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                          -> Data.Functor.Identity.Identity b)[OneShot]
                   (w4 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            Text.Megaparsec.Error.Dec
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Data.Functor.Identity.Identity b)[OneShot] ->
                 Main.$wg
                   Main.table18
                     `cast`
                   ([Sub (Sym (Text.Megaparsec.Prim.D:R:Token[][0]))])_R
                   @ b
                   w
                   w1
                   w3
                   w4) -}
ad3154bfe8013ddb636498efed727730
  table18 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "/"#) -}
63623731977d071b27144b38de3e19be
  table19 ::
    Text.Megaparsec.Expr.Operator
      (Text.Megaparsec.Prim.ParsecT
         Text.Megaparsec.Error.Dec
         GHC.Base.String
         Data.Functor.Identity.Identity)
      Main.Expr
  {- Strictness: m2,
     Unfolding: (Text.Megaparsec.Expr.InfixL
                   @ (Text.Megaparsec.Prim.ParsecT
                        Text.Megaparsec.Error.Dec
                        GHC.Base.String
                        Data.Functor.Identity.Identity)
                   @ Main.Expr
                   Main.table20
                     `cast`
                   (Sym (Text.Megaparsec.Prim.N:ParsecT[0]
                             <Text.Megaparsec.Error.Dec>_N
                             <[GHC.Types.Char]>_N
                             <Data.Functor.Identity.Identity>_R
                             <Main.Expr -> Main.Expr -> Main.Expr>_R))) -}
57ccd4e5004d9c8f5576a75ec0528457
  table2 ::
    [[Text.Megaparsec.Expr.Operator
        Text.Megaparsec.String.Parser Main.Expr]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [Text.Megaparsec.Expr.Operator
                        Text.Megaparsec.String.Parser Main.Expr]
                   Main.table3
                   (GHC.Types.[]
                      @ [Text.Megaparsec.Expr.Operator
                           Text.Megaparsec.String.Parser Main.Expr])) -}
de836433356a4741eb66f4c455909199
  table20 ::
    Text.Megaparsec.Prim.State [GHC.Types.Char]
    -> ((Main.Expr -> Main.Expr -> Main.Expr)
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token [GHC.Types.Char])
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b1)
    -> ((Main.Expr -> Main.Expr -> Main.Expr)
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token [GHC.Types.Char])
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ @ b1
                   (eta2 :: Text.Megaparsec.Prim.State [GHC.Types.Char])
                   (eta3 :: (Main.Expr -> Main.Expr -> Main.Expr)
                            -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                            -> Text.Megaparsec.Prim.Hints
                                 (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            -> Data.Functor.Identity.Identity b1)
                   (eta4 :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                              Text.Megaparsec.Error.Dec
                            -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                            -> Data.Functor.Identity.Identity b1)
                   (eta5 :: (Main.Expr -> Main.Expr -> Main.Expr)
                            -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                            -> Text.Megaparsec.Prim.Hints
                                 (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            -> Data.Functor.Identity.Identity b1)
                   (eta6 :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                              Text.Megaparsec.Error.Dec
                            -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                            -> Data.Functor.Identity.Identity b1) ->
                 let {
                   lvl40 :: Text.Megaparsec.Prim.State [GHC.Types.Char]
                            -> Text.Megaparsec.Prim.Hints
                                 (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            -> Data.Functor.Identity.Identity b1
                   = eta5 Main.Multiplication
                 } in
                 let {
                   lvl41 :: Text.Megaparsec.Prim.State [GHC.Types.Char]
                            -> Text.Megaparsec.Prim.Hints
                                 (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            -> Data.Functor.Identity.Identity b1
                   = eta3 Main.Multiplication
                 } in
                 Text.Megaparsec.Prim.$w$c<*
                   @ Text.Megaparsec.Error.Dec
                   @ [GHC.Types.Char]
                   @ Data.Functor.Identity.Identity
                   Text.Megaparsec.Prim.$fStream[]
                   @ GHC.Base.String
                   @ ()
                   Main.table21
                     `cast`
                   (Sym (Text.Megaparsec.Prim.N:ParsecT[0]
                             <Text.Megaparsec.Error.Dec>_N
                             <[GHC.Types.Char]>_N
                             <Data.Functor.Identity.Identity>_R
                             ([Sub (Sym (Text.Megaparsec.Prim.D:R:Token[][0]))])_R))
                   Main.sc
                   @ b1
                   eta2
                   (\ (x :: GHC.Base.String) -> lvl41)
                   eta4
                   (\ (x :: GHC.Base.String) -> lvl40)
                   eta6) -}
049c0a92b5fe4cad1677520d495e4897
  table21 ::
    Text.Megaparsec.Prim.State [GHC.Types.Char]
    -> ([Text.Megaparsec.Prim.Token [GHC.Types.Char]]
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token [GHC.Types.Char])
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b)
    -> ([Text.Megaparsec.Prim.Token [GHC.Types.Char]]
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token [GHC.Types.Char])
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Unfolding: (\ @ b
                   (w :: Text.Megaparsec.Prim.State [GHC.Types.Char])[OneShot]
                   (w1 :: [Text.Megaparsec.Prim.Token [GHC.Types.Char]]
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                          -> Data.Functor.Identity.Identity b)[OneShot]
                   (w2 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            Text.Megaparsec.Error.Dec
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Data.Functor.Identity.Identity b)[OneShot]
                   (w3 :: [Text.Megaparsec.Prim.Token [GHC.Types.Char]]
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                          -> Data.Functor.Identity.Identity b)[OneShot]
                   (w4 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            Text.Megaparsec.Error.Dec
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Data.Functor.Identity.Identity b)[OneShot] ->
                 Main.$wg
                   Main.table22
                     `cast`
                   ([Sub (Sym (Text.Megaparsec.Prim.D:R:Token[][0]))])_R
                   @ b
                   w
                   w1
                   w3
                   w4) -}
ad0863c156666c879608d6a2dd419ccc
  table22 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "*"#) -}
c21a1548d9dc99d5a2ba3bd8a8fa7a03
  table23 ::
    [Text.Megaparsec.Expr.Operator
       Text.Megaparsec.String.Parser Main.Expr]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Text.Megaparsec.Expr.Operator
                        Text.Megaparsec.String.Parser Main.Expr)
                   Main.table24
                   (GHC.Types.[]
                      @ (Text.Megaparsec.Expr.Operator
                           Text.Megaparsec.String.Parser Main.Expr))) -}
2c43a57c816dba49f2cad2aff602cd45
  table24 ::
    Text.Megaparsec.Expr.Operator
      (Text.Megaparsec.Prim.ParsecT
         Text.Megaparsec.Error.Dec
         GHC.Base.String
         Data.Functor.Identity.Identity)
      Main.Expr
  {- Strictness: m4,
     Unfolding: (Text.Megaparsec.Expr.Prefix
                   @ (Text.Megaparsec.Prim.ParsecT
                        Text.Megaparsec.Error.Dec
                        GHC.Base.String
                        Data.Functor.Identity.Identity)
                   @ Main.Expr
                   Main.table25
                     `cast`
                   (Sym (Text.Megaparsec.Prim.N:ParsecT[0]
                             <Text.Megaparsec.Error.Dec>_N
                             <[GHC.Types.Char]>_N
                             <Data.Functor.Identity.Identity>_R
                             <Main.Expr -> Main.Expr>_R))) -}
e664718aa61a604afe885de24ad1a292
  table25 ::
    Text.Megaparsec.Prim.State [GHC.Types.Char]
    -> ((Main.Expr -> Main.Expr)
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token [GHC.Types.Char])
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b1)
    -> ((Main.Expr -> Main.Expr)
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token [GHC.Types.Char])
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ @ b1
                   (eta2 :: Text.Megaparsec.Prim.State [GHC.Types.Char])
                   (eta3 :: (Main.Expr -> Main.Expr)
                            -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                            -> Text.Megaparsec.Prim.Hints
                                 (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            -> Data.Functor.Identity.Identity b1)
                   (eta4 :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                              Text.Megaparsec.Error.Dec
                            -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                            -> Data.Functor.Identity.Identity b1)
                   (eta5 :: (Main.Expr -> Main.Expr)
                            -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                            -> Text.Megaparsec.Prim.Hints
                                 (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            -> Data.Functor.Identity.Identity b1)
                   (eta6 :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                              Text.Megaparsec.Error.Dec
                            -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                            -> Data.Functor.Identity.Identity b1) ->
                 let {
                   lvl40 :: Text.Megaparsec.Prim.State [GHC.Types.Char]
                            -> Text.Megaparsec.Prim.Hints
                                 (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            -> Data.Functor.Identity.Identity b1
                   = eta5 Main.Negation
                 } in
                 let {
                   lvl41 :: Text.Megaparsec.Prim.State [GHC.Types.Char]
                            -> Text.Megaparsec.Prim.Hints
                                 (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            -> Data.Functor.Identity.Identity b1
                   = eta3 Main.Negation
                 } in
                 Text.Megaparsec.Prim.$w$c<*
                   @ Text.Megaparsec.Error.Dec
                   @ [GHC.Types.Char]
                   @ Data.Functor.Identity.Identity
                   Text.Megaparsec.Prim.$fStream[]
                   @ GHC.Base.String
                   @ ()
                   Main.table7
                     `cast`
                   (Sym (Text.Megaparsec.Prim.N:ParsecT[0]
                             <Text.Megaparsec.Error.Dec>_N
                             <[GHC.Types.Char]>_N
                             <Data.Functor.Identity.Identity>_R
                             ([Sub (Sym (Text.Megaparsec.Prim.D:R:Token[][0]))])_R))
                   Main.sc
                   @ b1
                   eta2
                   (\ (x :: GHC.Base.String) -> lvl41)
                   eta4
                   (\ (x :: GHC.Base.String) -> lvl40)
                   eta6) -}
eb5fd15631172e3d7b3439c855103bcf
  table3 ::
    [Text.Megaparsec.Expr.Operator
       Text.Megaparsec.String.Parser Main.Expr]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Text.Megaparsec.Expr.Operator
                        Text.Megaparsec.String.Parser Main.Expr)
                   Main.table9
                   Main.table4) -}
d17af9dd255205e183ed1bb5a13a060b
  table4 ::
    [Text.Megaparsec.Expr.Operator
       Text.Megaparsec.String.Parser Main.Expr]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Text.Megaparsec.Expr.Operator
                        Text.Megaparsec.String.Parser Main.Expr)
                   Main.table5
                   (GHC.Types.[]
                      @ (Text.Megaparsec.Expr.Operator
                           Text.Megaparsec.String.Parser Main.Expr))) -}
bd8f0922a5fde2eb65cafc7efbc503a5
  table5 ::
    Text.Megaparsec.Expr.Operator
      (Text.Megaparsec.Prim.ParsecT
         Text.Megaparsec.Error.Dec
         GHC.Base.String
         Data.Functor.Identity.Identity)
      Main.Expr
  {- Strictness: m2,
     Unfolding: (Text.Megaparsec.Expr.InfixL
                   @ (Text.Megaparsec.Prim.ParsecT
                        Text.Megaparsec.Error.Dec
                        GHC.Base.String
                        Data.Functor.Identity.Identity)
                   @ Main.Expr
                   Main.table6
                     `cast`
                   (Sym (Text.Megaparsec.Prim.N:ParsecT[0]
                             <Text.Megaparsec.Error.Dec>_N
                             <[GHC.Types.Char]>_N
                             <Data.Functor.Identity.Identity>_R
                             <Main.Expr -> Main.Expr -> Main.Expr>_R))) -}
cec84f35cd3c509a98a2bca44906e5c9
  table6 ::
    Text.Megaparsec.Prim.State [GHC.Types.Char]
    -> ((Main.Expr -> Main.Expr -> Main.Expr)
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token [GHC.Types.Char])
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b1)
    -> ((Main.Expr -> Main.Expr -> Main.Expr)
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token [GHC.Types.Char])
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ @ b1
                   (eta2 :: Text.Megaparsec.Prim.State [GHC.Types.Char])
                   (eta3 :: (Main.Expr -> Main.Expr -> Main.Expr)
                            -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                            -> Text.Megaparsec.Prim.Hints
                                 (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            -> Data.Functor.Identity.Identity b1)
                   (eta4 :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                              Text.Megaparsec.Error.Dec
                            -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                            -> Data.Functor.Identity.Identity b1)
                   (eta5 :: (Main.Expr -> Main.Expr -> Main.Expr)
                            -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                            -> Text.Megaparsec.Prim.Hints
                                 (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            -> Data.Functor.Identity.Identity b1)
                   (eta6 :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                              Text.Megaparsec.Error.Dec
                            -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                            -> Data.Functor.Identity.Identity b1) ->
                 let {
                   lvl40 :: Text.Megaparsec.Prim.State [GHC.Types.Char]
                            -> Text.Megaparsec.Prim.Hints
                                 (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            -> Data.Functor.Identity.Identity b1
                   = eta5 Main.Division
                 } in
                 let {
                   lvl41 :: Text.Megaparsec.Prim.State [GHC.Types.Char]
                            -> Text.Megaparsec.Prim.Hints
                                 (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            -> Data.Functor.Identity.Identity b1
                   = eta3 Main.Division
                 } in
                 Text.Megaparsec.Prim.$w$c<*
                   @ Text.Megaparsec.Error.Dec
                   @ [GHC.Types.Char]
                   @ Data.Functor.Identity.Identity
                   Text.Megaparsec.Prim.$fStream[]
                   @ GHC.Base.String
                   @ ()
                   Main.table7
                     `cast`
                   (Sym (Text.Megaparsec.Prim.N:ParsecT[0]
                             <Text.Megaparsec.Error.Dec>_N
                             <[GHC.Types.Char]>_N
                             <Data.Functor.Identity.Identity>_R
                             ([Sub (Sym (Text.Megaparsec.Prim.D:R:Token[][0]))])_R))
                   Main.sc
                   @ b1
                   eta2
                   (\ (x :: GHC.Base.String) -> lvl41)
                   eta4
                   (\ (x :: GHC.Base.String) -> lvl40)
                   eta6) -}
b938c423c1e25a686b8614729508f2d7
  table7 ::
    Text.Megaparsec.Prim.State [GHC.Types.Char]
    -> ([Text.Megaparsec.Prim.Token [GHC.Types.Char]]
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token [GHC.Types.Char])
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b)
    -> ([Text.Megaparsec.Prim.Token [GHC.Types.Char]]
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token [GHC.Types.Char])
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Unfolding: (\ @ b
                   (w :: Text.Megaparsec.Prim.State [GHC.Types.Char])[OneShot]
                   (w1 :: [Text.Megaparsec.Prim.Token [GHC.Types.Char]]
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                          -> Data.Functor.Identity.Identity b)[OneShot]
                   (w2 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            Text.Megaparsec.Error.Dec
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Data.Functor.Identity.Identity b)[OneShot]
                   (w3 :: [Text.Megaparsec.Prim.Token [GHC.Types.Char]]
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                          -> Data.Functor.Identity.Identity b)[OneShot]
                   (w4 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            Text.Megaparsec.Error.Dec
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Data.Functor.Identity.Identity b)[OneShot] ->
                 Main.$wg
                   Main.table8
                     `cast`
                   ([Sub (Sym (Text.Megaparsec.Prim.D:R:Token[][0]))])_R
                   @ b
                   w
                   w1
                   w3
                   w4) -}
8e874fdac35699bf2427a85e8f387721
  table8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "-"#) -}
c8cfa25b4c1ee5428f44ecf29be98b0f
  table9 ::
    Text.Megaparsec.Expr.Operator
      (Text.Megaparsec.Prim.ParsecT
         Text.Megaparsec.Error.Dec
         GHC.Base.String
         Data.Functor.Identity.Identity)
      Main.Expr
  {- Strictness: m2,
     Unfolding: (Text.Megaparsec.Expr.InfixL
                   @ (Text.Megaparsec.Prim.ParsecT
                        Text.Megaparsec.Error.Dec
                        GHC.Base.String
                        Data.Functor.Identity.Identity)
                   @ Main.Expr
                   Main.table10
                     `cast`
                   (Sym (Text.Megaparsec.Prim.N:ParsecT[0]
                             <Text.Megaparsec.Error.Dec>_N
                             <[GHC.Types.Char]>_N
                             <Data.Functor.Identity.Identity>_R
                             <Main.Expr -> Main.Expr -> Main.Expr>_R))) -}
befe35f170fe7d3299120843b2d36e76
  term :: Text.Megaparsec.String.Parser Main.Expr
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(C1(U))>,
     Unfolding: InlineRule (0, True, True)
                Main.expr5
                  `cast`
                (Sym (Text.Megaparsec.Prim.N:ParsecT[0]
                          <Text.Megaparsec.Error.Dec>_N
                          <[GHC.Types.Char]>_N
                          <Data.Functor.Identity.Identity>_R
                          <Main.Expr>_R)) -}
instance GHC.Classes.Eq [Main.Equation] = Main.$fEqEquation
instance GHC.Classes.Eq [Main.Expr] = Main.$fEqExpr
instance GHC.Show.Show [Main.Equation] = Main.$fShowEquation
instance GHC.Show.Show [Main.Expr] = Main.$fShowExpr
"SPEC/Main $fAlternativeParsecT @ Dec @ [Char] _" [ALWAYS] forall @ (m :: *
                                                                          -> *)
                                                                  ($dStream :: Text.Megaparsec.Prim.Stream
                                                                                 [GHC.Types.Char])
                                                                  ($dErrorComponent :: Text.Megaparsec.Error.ErrorComponent
                                                                                         Text.Megaparsec.Error.Dec)
  Text.Megaparsec.Prim.$fAlternativeParsecT @ Text.Megaparsec.Error.Dec
                                            @ [GHC.Types.Char]
                                            @ m
                                            $dErrorComponent
                                            $dStream
  = Main.$s$fAlternativeParsecT @ m
"SPEC/Main $fApplicativeParsecT @ Dec @ [Char] _" [ALWAYS] forall @ (m :: *
                                                                          -> *)
                                                                  ($dStream :: Text.Megaparsec.Prim.Stream
                                                                                 [GHC.Types.Char])
                                                                  ($dErrorComponent :: Text.Megaparsec.Error.ErrorComponent
                                                                                         Text.Megaparsec.Error.Dec)
  Text.Megaparsec.Prim.$fApplicativeParsecT @ Text.Megaparsec.Error.Dec
                                            @ [GHC.Types.Char]
                                            @ m
                                            $dErrorComponent
                                            $dStream
  = Main.$s$fAlternativeParsecT_$s$fApplicativeParsecT @ m
"SPEC/Main $fApplicativeParsecT_$cp1Applicative @ Dec @ [Char] _" [ALWAYS] forall @ (m :: *
                                                                                          -> *)
                                                                                  ($dStream :: Text.Megaparsec.Prim.Stream
                                                                                                 [GHC.Types.Char])
                                                                                  ($dErrorComponent :: Text.Megaparsec.Error.ErrorComponent
                                                                                                         Text.Megaparsec.Error.Dec)
  Text.Megaparsec.Prim.$fApplicativeParsecT_$cp1Applicative @ Text.Megaparsec.Error.Dec
                                                            @ [GHC.Types.Char]
                                                            @ m
                                                            $dErrorComponent
                                                            $dStream
  = Main.$s$fAlternativeParsecT_$s$fApplicativeParsecT_$cp1Applicative
      @ m
"SPEC/Main $fMonadParsecT @ Dec @ [Char] _" [ALWAYS] forall @ (m :: *
                                                                    -> *)
                                                            ($dStream :: Text.Megaparsec.Prim.Stream
                                                                           [GHC.Types.Char])
                                                            ($dErrorComponent :: Text.Megaparsec.Error.ErrorComponent
                                                                                   Text.Megaparsec.Error.Dec)
  Text.Megaparsec.Prim.$fMonadParsecT @ Text.Megaparsec.Error.Dec
                                      @ [GHC.Types.Char]
                                      @ m
                                      $dErrorComponent
                                      $dStream
  = Main.$s$fMonadParsecT @ m
"SPEC/Main $fMonadParsecesParsecT @ Dec @ [Char] _" [ALWAYS] forall @ (m :: *
                                                                            -> *)
                                                                    ($dStream :: Text.Megaparsec.Prim.Stream
                                                                                   [GHC.Types.Char])
                                                                    ($dErrorComponent :: Text.Megaparsec.Error.ErrorComponent
                                                                                           Text.Megaparsec.Error.Dec)
  Text.Megaparsec.Prim.$fMonadParsecesParsecT @ Text.Megaparsec.Error.Dec
                                              @ [GHC.Types.Char]
                                              @ m
                                              $dErrorComponent
                                              $dStream
  = Main.$s$fMonadParsecesParsecT @ m
"SPEC/Main $fMonadParsecesParsecT_$chidden @ Dec @ [Char] _" [ALWAYS] forall @ (m :: *
                                                                                     -> *)
                                                                             ($dStream :: Text.Megaparsec.Prim.Stream
                                                                                            [GHC.Types.Char])
                                                                             ($dErrorComponent :: Text.Megaparsec.Error.ErrorComponent
                                                                                                    Text.Megaparsec.Error.Dec)
  Text.Megaparsec.Prim.$fMonadParsecesParsecT_$chidden @ Text.Megaparsec.Error.Dec
                                                       @ [GHC.Types.Char]
                                                       @ m
                                                       $dErrorComponent
                                                       $dStream
  = Main.$s$fMonadParsecesParsecT_$s$fMonadParsecesParsecT_$chidden
      @ m
"SPEC/Main $fMonadParsecesParsecT_$clabel @ Dec @ [Char] _" [ALWAYS] forall @ (m :: *
                                                                                    -> *)
                                                                            ($dStream :: Text.Megaparsec.Prim.Stream
                                                                                           [GHC.Types.Char])
                                                                            ($dErrorComponent :: Text.Megaparsec.Error.ErrorComponent
                                                                                                   Text.Megaparsec.Error.Dec)
  Text.Megaparsec.Prim.$fMonadParsecesParsecT_$clabel @ Text.Megaparsec.Error.Dec
                                                      @ [GHC.Types.Char]
                                                      @ m
                                                      $dErrorComponent
                                                      $dStream
  = Main.$s$fMonadParsecesParsecT_$s$fMonadParsecesParsecT_$clabel
      @ m
"SPEC/Main $fMonadParsecesParsecT_$cp1MonadParsec @ Dec @ [Char] _" [ALWAYS] forall @ (m :: *
                                                                                            -> *)
                                                                                    ($dStream :: Text.Megaparsec.Prim.Stream
                                                                                                   [GHC.Types.Char])
                                                                                    ($dErrorComponent :: Text.Megaparsec.Error.ErrorComponent
                                                                                                           Text.Megaparsec.Error.Dec)
  Text.Megaparsec.Prim.$fMonadParsecesParsecT_$cp1MonadParsec @ Text.Megaparsec.Error.Dec
                                                              @ [GHC.Types.Char]
                                                              @ m
                                                              $dErrorComponent
                                                              $dStream
  = Main.$s$fMonadParsecesParsecT_$s$fMonadParsecesParsecT_$cp1MonadParsec
      @ m
"SPEC/Main $fMonadParsecesParsecT_$cp2MonadParsec @ Dec @ [Char] _" [ALWAYS] forall @ (m :: *
                                                                                            -> *)
                                                                                    ($dStream :: Text.Megaparsec.Prim.Stream
                                                                                                   [GHC.Types.Char])
                                                                                    ($dErrorComponent :: Text.Megaparsec.Error.ErrorComponent
                                                                                                           Text.Megaparsec.Error.Dec)
  Text.Megaparsec.Prim.$fMonadParsecesParsecT_$cp2MonadParsec @ Text.Megaparsec.Error.Dec
                                                              @ [GHC.Types.Char]
                                                              @ m
                                                              $dErrorComponent
                                                              $dStream
  = Main.$s$fMonadParsecesParsecT_$s$fMonadParsecesParsecT_$cp2MonadParsec
      @ m
"SPEC/Main $fMonadParsecesParsecT_$ctoken @ Dec @ [Char] _" [ALWAYS] forall @ (m :: *
                                                                                    -> *)
                                                                            ($dStream :: Text.Megaparsec.Prim.Stream
                                                                                           [GHC.Types.Char])
                                                                            ($dErrorComponent :: Text.Megaparsec.Error.ErrorComponent
                                                                                                   Text.Megaparsec.Error.Dec)
  Text.Megaparsec.Prim.$fMonadParsecesParsecT_$ctoken @ Text.Megaparsec.Error.Dec
                                                      @ [GHC.Types.Char]
                                                      @ m
                                                      $dErrorComponent
                                                      $dStream
  = Main.$s$fMonadParsecesParsecT_$s$fMonadParsecesParsecT_$ctoken
      @ m
"SPEC/Main $fMonadPlusParsecT @ Dec @ [Char] _" [ALWAYS] forall @ (m :: *
                                                                        -> *)
                                                                ($dStream :: Text.Megaparsec.Prim.Stream
                                                                               [GHC.Types.Char])
                                                                ($dErrorComponent :: Text.Megaparsec.Error.ErrorComponent
                                                                                       Text.Megaparsec.Error.Dec)
  Text.Megaparsec.Prim.$fMonadPlusParsecT @ Text.Megaparsec.Error.Dec
                                          @ [GHC.Types.Char]
                                          @ m
                                          $dErrorComponent
                                          $dStream
  = Main.$s$fMonadParsecesParsecT_$s$fMonadPlusParsecT @ m
"SPEC/Main between @ (ParsecT Dec String Identity) _ _ _" [ALWAYS] forall @ open
                                                                          @ close
                                                                          @ a
                                                                          ($dApplicative :: GHC.Base.Applicative
                                                                                              (Text.Megaparsec.Prim.ParsecT
                                                                                                 Text.Megaparsec.Error.Dec
                                                                                                 GHC.Base.String
                                                                                                 Data.Functor.Identity.Identity))
  Text.Megaparsec.Combinator.between @ (Text.Megaparsec.Prim.ParsecT
                                          Text.Megaparsec.Error.Dec
                                          GHC.Base.String
                                          Data.Functor.Identity.Identity)
                                     @ open
                                     @ close
                                     @ a
                                     $dApplicative
  = Main.$sbetween @ open @ close @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

